// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SignalService.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace libsignalservice.push {

  /// <summary>Holder for reflection information generated from SignalService.proto</summary>
  public static partial class SignalServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for SignalService.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SignalServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNTaWduYWxTZXJ2aWNlLnByb3RvEg1zaWduYWxzZXJ2aWNlIsMCCghFbnZl",
            "bG9wZRIqCgR0eXBlGAEgASgOMhwuc2lnbmFsc2VydmljZS5FbnZlbG9wZS5U",
            "eXBlEg4KBnNvdXJjZRgCIAEoCRIUCgxzb3VyY2VEZXZpY2UYByABKA0SDQoF",
            "cmVsYXkYAyABKAkSEQoJdGltZXN0YW1wGAUgASgEEhUKDWxlZ2FjeU1lc3Nh",
            "Z2UYBiABKAwSDwoHY29udGVudBgIIAEoDBISCgpzZXJ2ZXJHdWlkGAkgASgJ",
            "EhcKD3NlcnZlclRpbWVzdGFtcBgKIAEoBCJuCgRUeXBlEgsKB1VOS05PV04Q",
            "ABIOCgpDSVBIRVJURVhUEAESEAoMS0VZX0VYQ0hBTkdFEAISEQoNUFJFS0VZ",
            "X0JVTkRMRRADEgsKB1JFQ0VJUFQQBRIXChNVTklERU5USUZJRURfU0VOREVS",
            "EAYiuQIKB0NvbnRlbnQSLwoLZGF0YU1lc3NhZ2UYASABKAsyGi5zaWduYWxz",
            "ZXJ2aWNlLkRhdGFNZXNzYWdlEi8KC3N5bmNNZXNzYWdlGAIgASgLMhouc2ln",
            "bmFsc2VydmljZS5TeW5jTWVzc2FnZRIvCgtjYWxsTWVzc2FnZRgDIAEoCzIa",
            "LnNpZ25hbHNlcnZpY2UuQ2FsbE1lc3NhZ2USLwoLbnVsbE1lc3NhZ2UYBCAB",
            "KAsyGi5zaWduYWxzZXJ2aWNlLk51bGxNZXNzYWdlEjUKDnJlY2VpcHRNZXNz",
            "YWdlGAUgASgLMh0uc2lnbmFsc2VydmljZS5SZWNlaXB0TWVzc2FnZRIzCg10",
            "eXBpbmdNZXNzYWdlGAYgASgLMhwuc2lnbmFsc2VydmljZS5UeXBpbmdNZXNz",
            "YWdlItgDCgtDYWxsTWVzc2FnZRIvCgVvZmZlchgBIAEoCzIgLnNpZ25hbHNl",
            "cnZpY2UuQ2FsbE1lc3NhZ2UuT2ZmZXISMQoGYW5zd2VyGAIgASgLMiEuc2ln",
            "bmFsc2VydmljZS5DYWxsTWVzc2FnZS5BbnN3ZXISNwoJaWNlVXBkYXRlGAMg",
            "AygLMiQuc2lnbmFsc2VydmljZS5DYWxsTWVzc2FnZS5JY2VVcGRhdGUSMQoG",
            "aGFuZ3VwGAQgASgLMiEuc2lnbmFsc2VydmljZS5DYWxsTWVzc2FnZS5IYW5n",
            "dXASLQoEYnVzeRgFIAEoCzIfLnNpZ25hbHNlcnZpY2UuQ2FsbE1lc3NhZ2Uu",
            "QnVzeRooCgVPZmZlchIKCgJpZBgBIAEoBBITCgtkZXNjcmlwdGlvbhgCIAEo",
            "CRopCgZBbnN3ZXISCgoCaWQYASABKAQSEwoLZGVzY3JpcHRpb24YAiABKAka",
            "SwoJSWNlVXBkYXRlEgoKAmlkGAEgASgEEg4KBnNkcE1pZBgCIAEoCRIVCg1z",
            "ZHBNTGluZUluZGV4GAMgASgNEgsKA3NkcBgEIAEoCRoSCgRCdXN5EgoKAmlk",
            "GAEgASgEGhQKBkhhbmd1cBIKCgJpZBgBIAEoBCLeEAoLRGF0YU1lc3NhZ2US",
            "DAoEYm9keRgBIAEoCRI1CgthdHRhY2htZW50cxgCIAMoCzIgLnNpZ25hbHNl",
            "cnZpY2UuQXR0YWNobWVudFBvaW50ZXISKgoFZ3JvdXAYAyABKAsyGy5zaWdu",
            "YWxzZXJ2aWNlLkdyb3VwQ29udGV4dBINCgVmbGFncxgEIAEoDRITCgtleHBp",
            "cmVUaW1lchgFIAEoDRISCgpwcm9maWxlS2V5GAYgASgMEhEKCXRpbWVzdGFt",
            "cBgHIAEoBBIvCgVxdW90ZRgIIAEoCzIgLnNpZ25hbHNlcnZpY2UuRGF0YU1l",
            "c3NhZ2UuUXVvdGUSMwoHY29udGFjdBgJIAMoCzIiLnNpZ25hbHNlcnZpY2Uu",
            "RGF0YU1lc3NhZ2UuQ29udGFjdBIzCgdwcmV2aWV3GAogAygLMiIuc2lnbmFs",
            "c2VydmljZS5EYXRhTWVzc2FnZS5QcmV2aWV3EjMKB3N0aWNrZXIYCyABKAsy",
            "Ii5zaWduYWxzZXJ2aWNlLkRhdGFNZXNzYWdlLlN0aWNrZXISHwoXcmVxdWly",
            "ZWRQcm90b2NvbFZlcnNpb24YDCABKA0SFAoMbWVzc2FnZVRpbWVyGA0gASgN",
            "GukBCgVRdW90ZRIKCgJpZBgBIAEoBBIOCgZhdXRob3IYAiABKAkSDAoEdGV4",
            "dBgDIAEoCRJGCgthdHRhY2htZW50cxgEIAMoCzIxLnNpZ25hbHNlcnZpY2Uu",
            "RGF0YU1lc3NhZ2UuUXVvdGUuUXVvdGVkQXR0YWNobWVudBpuChBRdW90ZWRB",
            "dHRhY2htZW50EhMKC2NvbnRlbnRUeXBlGAEgASgJEhAKCGZpbGVOYW1lGAIg",
            "ASgJEjMKCXRodW1ibmFpbBgDIAEoCzIgLnNpZ25hbHNlcnZpY2UuQXR0YWNo",
            "bWVudFBvaW50ZXIaxAgKB0NvbnRhY3QSNQoEbmFtZRgBIAEoCzInLnNpZ25h",
            "bHNlcnZpY2UuRGF0YU1lc3NhZ2UuQ29udGFjdC5OYW1lEjgKBm51bWJlchgD",
            "IAMoCzIoLnNpZ25hbHNlcnZpY2UuRGF0YU1lc3NhZ2UuQ29udGFjdC5QaG9u",
            "ZRI3CgVlbWFpbBgEIAMoCzIoLnNpZ25hbHNlcnZpY2UuRGF0YU1lc3NhZ2Uu",
            "Q29udGFjdC5FbWFpbBJBCgdhZGRyZXNzGAUgAygLMjAuc2lnbmFsc2Vydmlj",
            "ZS5EYXRhTWVzc2FnZS5Db250YWN0LlBvc3RhbEFkZHJlc3MSOQoGYXZhdGFy",
            "GAYgASgLMikuc2lnbmFsc2VydmljZS5EYXRhTWVzc2FnZS5Db250YWN0LkF2",
            "YXRhchIUCgxvcmdhbml6YXRpb24YByABKAkadgoETmFtZRIRCglnaXZlbk5h",
            "bWUYASABKAkSEgoKZmFtaWx5TmFtZRgCIAEoCRIOCgZwcmVmaXgYAyABKAkS",
            "DgoGc3VmZml4GAQgASgJEhIKCm1pZGRsZU5hbWUYBSABKAkSEwoLZGlzcGxh",
            "eU5hbWUYBiABKAkalgEKBVBob25lEg0KBXZhbHVlGAEgASgJEjsKBHR5cGUY",
            "AiABKA4yLS5zaWduYWxzZXJ2aWNlLkRhdGFNZXNzYWdlLkNvbnRhY3QuUGhv",
            "bmUuVHlwZRINCgVsYWJlbBgDIAEoCSIyCgRUeXBlEggKBEhPTUUQARIKCgZN",
            "T0JJTEUQAhIICgRXT1JLEAMSCgoGQ1VTVE9NEAQalgEKBUVtYWlsEg0KBXZh",
            "bHVlGAEgASgJEjsKBHR5cGUYAiABKA4yLS5zaWduYWxzZXJ2aWNlLkRhdGFN",
            "ZXNzYWdlLkNvbnRhY3QuRW1haWwuVHlwZRINCgVsYWJlbBgDIAEoCSIyCgRU",
            "eXBlEggKBEhPTUUQARIKCgZNT0JJTEUQAhIICgRXT1JLEAMSCgoGQ1VTVE9N",
            "EAQagQIKDVBvc3RhbEFkZHJlc3MSQwoEdHlwZRgBIAEoDjI1LnNpZ25hbHNl",
            "cnZpY2UuRGF0YU1lc3NhZ2UuQ29udGFjdC5Qb3N0YWxBZGRyZXNzLlR5cGUS",
            "DQoFbGFiZWwYAiABKAkSDgoGc3RyZWV0GAMgASgJEg0KBXBvYm94GAQgASgJ",
            "EhQKDG5laWdoYm9yaG9vZBgFIAEoCRIMCgRjaXR5GAYgASgJEg4KBnJlZ2lv",
            "bhgHIAEoCRIQCghwb3N0Y29kZRgIIAEoCRIPCgdjb3VudHJ5GAkgASgJIiYK",
            "BFR5cGUSCAoESE9NRRABEggKBFdPUksQAhIKCgZDVVNUT00QAxpNCgZBdmF0",
            "YXISMAoGYXZhdGFyGAEgASgLMiAuc2lnbmFsc2VydmljZS5BdHRhY2htZW50",
            "UG9pbnRlchIRCglpc1Byb2ZpbGUYAiABKAgaVgoHUHJldmlldxILCgN1cmwY",
            "ASABKAkSDQoFdGl0bGUYAiABKAkSLwoFaW1hZ2UYAyABKAsyIC5zaWduYWxz",
            "ZXJ2aWNlLkF0dGFjaG1lbnRQb2ludGVyGm0KB1N0aWNrZXISDgoGcGFja0lk",
            "GAEgASgMEg8KB3BhY2tLZXkYAiABKAwSEQoJc3RpY2tlcklkGAMgASgNEi4K",
            "BGRhdGEYBCABKAsyIC5zaWduYWxzZXJ2aWNlLkF0dGFjaG1lbnRQb2ludGVy",
            "Ik0KBUZsYWdzEg8KC0VORF9TRVNTSU9OEAESGwoXRVhQSVJBVElPTl9USU1F",
            "Ul9VUERBVEUQAhIWChJQUk9GSUxFX0tFWV9VUERBVEUQBCJDCg9Qcm90b2Nv",
            "bFZlcnNpb24SCwoHSU5JVElBTBAAEhIKDk1FU1NBR0VfVElNRVJTEAESCwoH",
            "Q1VSUkVOVBABGgIQASIeCgtOdWxsTWVzc2FnZRIPCgdwYWRkaW5nGAEgASgM",
            "InUKDlJlY2VpcHRNZXNzYWdlEjAKBHR5cGUYASABKA4yIi5zaWduYWxzZXJ2",
            "aWNlLlJlY2VpcHRNZXNzYWdlLlR5cGUSEQoJdGltZXN0YW1wGAIgAygEIh4K",
            "BFR5cGUSDAoIREVMSVZFUlkQABIICgRSRUFEEAEijAEKDVR5cGluZ01lc3Nh",
            "Z2USEQoJdGltZXN0YW1wGAEgASgEEjMKBmFjdGlvbhgCIAEoDjIjLnNpZ25h",
            "bHNlcnZpY2UuVHlwaW5nTWVzc2FnZS5BY3Rpb24SDwoHZ3JvdXBJZBgDIAEo",
            "DCIiCgZBY3Rpb24SCwoHU1RBUlRFRBAAEgsKB1NUT1BQRUQQASKrAQoIVmVy",
            "aWZpZWQSEwoLZGVzdGluYXRpb24YASABKAkSEwoLaWRlbnRpdHlLZXkYAiAB",
            "KAwSLAoFc3RhdGUYAyABKA4yHS5zaWduYWxzZXJ2aWNlLlZlcmlmaWVkLlN0",
            "YXRlEhMKC251bGxNZXNzYWdlGAQgASgMIjIKBVN0YXRlEgsKB0RFRkFVTFQQ",
            "ABIMCghWRVJJRklFRBABEg4KClVOVkVSSUZJRUQQAiLkDAoLU3luY01lc3Nh",
            "Z2USLQoEc2VudBgBIAEoCzIfLnNpZ25hbHNlcnZpY2UuU3luY01lc3NhZ2Uu",
            "U2VudBI1Cghjb250YWN0cxgCIAEoCzIjLnNpZ25hbHNlcnZpY2UuU3luY01l",
            "c3NhZ2UuQ29udGFjdHMSMQoGZ3JvdXBzGAMgASgLMiEuc2lnbmFsc2Vydmlj",
            "ZS5TeW5jTWVzc2FnZS5Hcm91cHMSMwoHcmVxdWVzdBgEIAEoCzIiLnNpZ25h",
            "bHNlcnZpY2UuU3luY01lc3NhZ2UuUmVxdWVzdBItCgRyZWFkGAUgAygLMh8u",
            "c2lnbmFsc2VydmljZS5TeW5jTWVzc2FnZS5SZWFkEjMKB2Jsb2NrZWQYBiAB",
            "KAsyIi5zaWduYWxzZXJ2aWNlLlN5bmNNZXNzYWdlLkJsb2NrZWQSKQoIdmVy",
            "aWZpZWQYByABKAsyFy5zaWduYWxzZXJ2aWNlLlZlcmlmaWVkEj8KDWNvbmZp",
            "Z3VyYXRpb24YCSABKAsyKC5zaWduYWxzZXJ2aWNlLlN5bmNNZXNzYWdlLkNv",
            "bmZpZ3VyYXRpb24SDwoHcGFkZGluZxgIIAEoDBJNChRzdGlja2VyUGFja09w",
            "ZXJhdGlvbhgKIAMoCzIvLnNpZ25hbHNlcnZpY2UuU3luY01lc3NhZ2UuU3Rp",
            "Y2tlclBhY2tPcGVyYXRpb24SRQoQbWVzc2FnZVRpbWVyUmVhZBgLIAEoCzIr",
            "LnNpZ25hbHNlcnZpY2UuU3luY01lc3NhZ2UuTWVzc2FnZVRpbWVyUmVhZBrA",
            "AgoEU2VudBITCgtkZXN0aW5hdGlvbhgBIAEoCRIRCgl0aW1lc3RhbXAYAiAB",
            "KAQSKwoHbWVzc2FnZRgDIAEoCzIaLnNpZ25hbHNlcnZpY2UuRGF0YU1lc3Nh",
            "Z2USIAoYZXhwaXJhdGlvblN0YXJ0VGltZXN0YW1wGAQgASgEElYKEnVuaWRl",
            "bnRpZmllZFN0YXR1cxgFIAMoCzI6LnNpZ25hbHNlcnZpY2UuU3luY01lc3Nh",
            "Z2UuU2VudC5VbmlkZW50aWZpZWREZWxpdmVyeVN0YXR1cxIgChFpc1JlY2lw",
            "aWVudFVwZGF0ZRgGIAEoCDoFZmFsc2UaRwoaVW5pZGVudGlmaWVkRGVsaXZl",
            "cnlTdGF0dXMSEwoLZGVzdGluYXRpb24YASABKAkSFAoMdW5pZGVudGlmaWVk",
            "GAIgASgIGlMKCENvbnRhY3RzEi4KBGJsb2IYASABKAsyIC5zaWduYWxzZXJ2",
            "aWNlLkF0dGFjaG1lbnRQb2ludGVyEhcKCGNvbXBsZXRlGAIgASgIOgVmYWxz",
            "ZRo4CgZHcm91cHMSLgoEYmxvYhgBIAEoCzIgLnNpZ25hbHNlcnZpY2UuQXR0",
            "YWNobWVudFBvaW50ZXIaLAoHQmxvY2tlZBIPCgdudW1iZXJzGAEgAygJEhAK",
            "CGdyb3VwSWRzGAIgAygMGo8BCgdSZXF1ZXN0EjUKBHR5cGUYASABKA4yJy5z",
            "aWduYWxzZXJ2aWNlLlN5bmNNZXNzYWdlLlJlcXVlc3QuVHlwZSJNCgRUeXBl",
            "EgsKB1VOS05PV04QABIMCghDT05UQUNUUxABEgoKBkdST1VQUxACEgsKB0JM",
            "T0NLRUQQAxIRCg1DT05GSUdVUkFUSU9OEAQaKQoEUmVhZBIOCgZzZW5kZXIY",
            "ASABKAkSEQoJdGltZXN0YW1wGAIgASgEGn0KDUNvbmZpZ3VyYXRpb24SFAoM",
            "cmVhZFJlY2VpcHRzGAEgASgIEiYKHnVuaWRlbnRpZmllZERlbGl2ZXJ5SW5k",
            "aWNhdG9ycxgCIAEoCBIYChB0eXBpbmdJbmRpY2F0b3JzGAMgASgIEhQKDGxp",
            "bmtQcmV2aWV3cxgEIAEoCBqcAQoUU3RpY2tlclBhY2tPcGVyYXRpb24SDgoG",
            "cGFja0lkGAEgASgMEg8KB3BhY2tLZXkYAiABKAwSQgoEdHlwZRgDIAEoDjI0",
            "LnNpZ25hbHNlcnZpY2UuU3luY01lc3NhZ2UuU3RpY2tlclBhY2tPcGVyYXRp",
            "b24uVHlwZSIfCgRUeXBlEgsKB0lOU1RBTEwQABIKCgZSRU1PVkUQARo1ChBN",
            "ZXNzYWdlVGltZXJSZWFkEg4KBnNlbmRlchgBIAEoCRIRCgl0aW1lc3RhbXAY",
            "AiABKAQizQIKEUF0dGFjaG1lbnRQb2ludGVyEg8KBWNkbklkGAEgASgGSAAS",
            "EAoGY2RuS2V5GA8gASgJSAASEwoLY29udGVudFR5cGUYAiABKAkSCwoDa2V5",
            "GAMgASgMEgwKBHNpemUYBCABKA0SEQoJdGh1bWJuYWlsGAUgASgMEg4KBmRp",
            "Z2VzdBgGIAEoDBIQCghmaWxlTmFtZRgHIAEoCRINCgVmbGFncxgIIAEoDRIN",
            "CgV3aWR0aBgJIAEoDRIOCgZoZWlnaHQYCiABKA0SDwoHY2FwdGlvbhgLIAEo",
            "CRIQCghibHVySGFzaBgMIAEoCRIXCg91cGxvYWRUaW1lc3RhbXAYDSABKAQS",
            "EQoJY2RuTnVtYmVyGA4gASgNIhoKBUZsYWdzEhEKDVZPSUNFX01FU1NBR0UQ",
            "AUIXChVhdHRhY2htZW50X2lkZW50aWZpZXIi5QEKDEdyb3VwQ29udGV4dBIK",
            "CgJpZBgBIAEoDBIuCgR0eXBlGAIgASgOMiAuc2lnbmFsc2VydmljZS5Hcm91",
            "cENvbnRleHQuVHlwZRIMCgRuYW1lGAMgASgJEg8KB21lbWJlcnMYBCADKAkS",
            "MAoGYXZhdGFyGAUgASgLMiAuc2lnbmFsc2VydmljZS5BdHRhY2htZW50UG9p",
            "bnRlciJICgRUeXBlEgsKB1VOS05PV04QABIKCgZVUERBVEUQARILCgdERUxJ",
            "VkVSEAISCAoEUVVJVBADEhAKDFJFUVVFU1RfSU5GTxAEIocCCg5Db250YWN0",
            "RGV0YWlscxIOCgZudW1iZXIYASABKAkSDAoEbmFtZRgCIAEoCRI0CgZhdmF0",
            "YXIYAyABKAsyJC5zaWduYWxzZXJ2aWNlLkNvbnRhY3REZXRhaWxzLkF2YXRh",
            "chINCgVjb2xvchgEIAEoCRIpCgh2ZXJpZmllZBgFIAEoCzIXLnNpZ25hbHNl",
            "cnZpY2UuVmVyaWZpZWQSEgoKcHJvZmlsZUtleRgGIAEoDBIPCgdibG9ja2Vk",
            "GAcgASgIEhMKC2V4cGlyZVRpbWVyGAggASgNGi0KBkF2YXRhchITCgtjb250",
            "ZW50VHlwZRgBIAEoCRIOCgZsZW5ndGgYAiABKA0i5wEKDEdyb3VwRGV0YWls",
            "cxIKCgJpZBgBIAEoDBIMCgRuYW1lGAIgASgJEg8KB21lbWJlcnMYAyADKAkS",
            "MgoGYXZhdGFyGAQgASgLMiIuc2lnbmFsc2VydmljZS5Hcm91cERldGFpbHMu",
            "QXZhdGFyEhQKBmFjdGl2ZRgFIAEoCDoEdHJ1ZRITCgtleHBpcmVUaW1lchgG",
            "IAEoDRINCgVjb2xvchgHIAEoCRIPCgdibG9ja2VkGAggASgIGi0KBkF2YXRh",
            "chITCgtjb250ZW50VHlwZRgBIAEoCRIOCgZsZW5ndGgYAiABKA1CWgorb3Jn",
            "LndoaXNwZXJzeXN0ZW1zLnRleHRzZWN1cmUuaW50ZXJuYWwucHVzaEITU2ln",
            "bmFsU2VydmljZVByb3Rvc6oCFWxpYnNpZ25hbHNlcnZpY2UucHVzaA=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.Envelope), global::libsignalservice.push.Envelope.Parser, new[]{ "Type", "Source", "SourceDevice", "Relay", "Timestamp", "LegacyMessage", "Content", "ServerGuid", "ServerTimestamp" }, null, new[]{ typeof(global::libsignalservice.push.Envelope.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.Content), global::libsignalservice.push.Content.Parser, new[]{ "DataMessage", "SyncMessage", "CallMessage", "NullMessage", "ReceiptMessage", "TypingMessage" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.CallMessage), global::libsignalservice.push.CallMessage.Parser, new[]{ "Offer", "Answer", "IceUpdate", "Hangup", "Busy" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.CallMessage.Types.Offer), global::libsignalservice.push.CallMessage.Types.Offer.Parser, new[]{ "Id", "Description" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.CallMessage.Types.Answer), global::libsignalservice.push.CallMessage.Types.Answer.Parser, new[]{ "Id", "Description" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.CallMessage.Types.IceUpdate), global::libsignalservice.push.CallMessage.Types.IceUpdate.Parser, new[]{ "Id", "SdpMid", "SdpMLineIndex", "Sdp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.CallMessage.Types.Busy), global::libsignalservice.push.CallMessage.Types.Busy.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.CallMessage.Types.Hangup), global::libsignalservice.push.CallMessage.Types.Hangup.Parser, new[]{ "Id" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.DataMessage), global::libsignalservice.push.DataMessage.Parser, new[]{ "Body", "Attachments", "Group", "Flags", "ExpireTimer", "ProfileKey", "Timestamp", "Quote", "Contact", "Preview", "Sticker", "RequiredProtocolVersion", "MessageTimer" }, null, new[]{ typeof(global::libsignalservice.push.DataMessage.Types.Flags), typeof(global::libsignalservice.push.DataMessage.Types.ProtocolVersion) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.DataMessage.Types.Quote), global::libsignalservice.push.DataMessage.Types.Quote.Parser, new[]{ "Id", "Author", "Text", "Attachments" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.DataMessage.Types.Quote.Types.QuotedAttachment), global::libsignalservice.push.DataMessage.Types.Quote.Types.QuotedAttachment.Parser, new[]{ "ContentType", "FileName", "Thumbnail" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.DataMessage.Types.Contact), global::libsignalservice.push.DataMessage.Types.Contact.Parser, new[]{ "Name", "Number", "Email", "Address", "Avatar", "Organization" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.DataMessage.Types.Contact.Types.Name), global::libsignalservice.push.DataMessage.Types.Contact.Types.Name.Parser, new[]{ "GivenName", "FamilyName", "Prefix", "Suffix", "MiddleName", "DisplayName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.DataMessage.Types.Contact.Types.Phone), global::libsignalservice.push.DataMessage.Types.Contact.Types.Phone.Parser, new[]{ "Value", "Type", "Label" }, null, new[]{ typeof(global::libsignalservice.push.DataMessage.Types.Contact.Types.Phone.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.DataMessage.Types.Contact.Types.Email), global::libsignalservice.push.DataMessage.Types.Contact.Types.Email.Parser, new[]{ "Value", "Type", "Label" }, null, new[]{ typeof(global::libsignalservice.push.DataMessage.Types.Contact.Types.Email.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.DataMessage.Types.Contact.Types.PostalAddress), global::libsignalservice.push.DataMessage.Types.Contact.Types.PostalAddress.Parser, new[]{ "Type", "Label", "Street", "Pobox", "Neighborhood", "City", "Region", "Postcode", "Country" }, null, new[]{ typeof(global::libsignalservice.push.DataMessage.Types.Contact.Types.PostalAddress.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.DataMessage.Types.Contact.Types.Avatar), global::libsignalservice.push.DataMessage.Types.Contact.Types.Avatar.Parser, new[]{ "Avatar_", "IsProfile" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.DataMessage.Types.Preview), global::libsignalservice.push.DataMessage.Types.Preview.Parser, new[]{ "Url", "Title", "Image" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.DataMessage.Types.Sticker), global::libsignalservice.push.DataMessage.Types.Sticker.Parser, new[]{ "PackId", "PackKey", "StickerId", "Data" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.NullMessage), global::libsignalservice.push.NullMessage.Parser, new[]{ "Padding" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.ReceiptMessage), global::libsignalservice.push.ReceiptMessage.Parser, new[]{ "Type", "Timestamp" }, null, new[]{ typeof(global::libsignalservice.push.ReceiptMessage.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.TypingMessage), global::libsignalservice.push.TypingMessage.Parser, new[]{ "Timestamp", "Action", "GroupId" }, null, new[]{ typeof(global::libsignalservice.push.TypingMessage.Types.Action) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.Verified), global::libsignalservice.push.Verified.Parser, new[]{ "Destination", "IdentityKey", "State", "NullMessage" }, null, new[]{ typeof(global::libsignalservice.push.Verified.Types.State) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.SyncMessage), global::libsignalservice.push.SyncMessage.Parser, new[]{ "Sent", "Contacts", "Groups", "Request", "Read", "Blocked", "Verified", "Configuration", "Padding", "StickerPackOperation", "MessageTimerRead" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.SyncMessage.Types.Sent), global::libsignalservice.push.SyncMessage.Types.Sent.Parser, new[]{ "Destination", "Timestamp", "Message", "ExpirationStartTimestamp", "UnidentifiedStatus", "IsRecipientUpdate" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.SyncMessage.Types.Sent.Types.UnidentifiedDeliveryStatus), global::libsignalservice.push.SyncMessage.Types.Sent.Types.UnidentifiedDeliveryStatus.Parser, new[]{ "Destination", "Unidentified" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.SyncMessage.Types.Contacts), global::libsignalservice.push.SyncMessage.Types.Contacts.Parser, new[]{ "Blob", "Complete" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.SyncMessage.Types.Groups), global::libsignalservice.push.SyncMessage.Types.Groups.Parser, new[]{ "Blob" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.SyncMessage.Types.Blocked), global::libsignalservice.push.SyncMessage.Types.Blocked.Parser, new[]{ "Numbers", "GroupIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.SyncMessage.Types.Request), global::libsignalservice.push.SyncMessage.Types.Request.Parser, new[]{ "Type" }, null, new[]{ typeof(global::libsignalservice.push.SyncMessage.Types.Request.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.SyncMessage.Types.Read), global::libsignalservice.push.SyncMessage.Types.Read.Parser, new[]{ "Sender", "Timestamp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.SyncMessage.Types.Configuration), global::libsignalservice.push.SyncMessage.Types.Configuration.Parser, new[]{ "ReadReceipts", "UnidentifiedDeliveryIndicators", "TypingIndicators", "LinkPreviews" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.SyncMessage.Types.StickerPackOperation), global::libsignalservice.push.SyncMessage.Types.StickerPackOperation.Parser, new[]{ "PackId", "PackKey", "Type" }, null, new[]{ typeof(global::libsignalservice.push.SyncMessage.Types.StickerPackOperation.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.SyncMessage.Types.MessageTimerRead), global::libsignalservice.push.SyncMessage.Types.MessageTimerRead.Parser, new[]{ "Sender", "Timestamp" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.AttachmentPointer), global::libsignalservice.push.AttachmentPointer.Parser, new[]{ "CdnId", "CdnKey", "ContentType", "Key", "Size", "Thumbnail", "Digest", "FileName", "Flags", "Width", "Height", "Caption", "BlurHash", "UploadTimestamp", "CdnNumber" }, new[]{ "AttachmentIdentifier" }, new[]{ typeof(global::libsignalservice.push.AttachmentPointer.Types.Flags) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.GroupContext), global::libsignalservice.push.GroupContext.Parser, new[]{ "Id", "Type", "Name", "Members", "Avatar" }, null, new[]{ typeof(global::libsignalservice.push.GroupContext.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.ContactDetails), global::libsignalservice.push.ContactDetails.Parser, new[]{ "Number", "Name", "Avatar", "Color", "Verified", "ProfileKey", "Blocked", "ExpireTimer" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.ContactDetails.Types.Avatar), global::libsignalservice.push.ContactDetails.Types.Avatar.Parser, new[]{ "ContentType", "Length" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.GroupDetails), global::libsignalservice.push.GroupDetails.Parser, new[]{ "Id", "Name", "Members", "Avatar", "Active", "ExpireTimer", "Color", "Blocked" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.GroupDetails.Types.Avatar), global::libsignalservice.push.GroupDetails.Types.Avatar.Parser, new[]{ "ContentType", "Length" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Envelope : pb::IMessage<Envelope> {
    private static readonly pb::MessageParser<Envelope> _parser = new pb::MessageParser<Envelope>(() => new Envelope());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Envelope> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::libsignalservice.push.SignalServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Envelope() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Envelope(Envelope other) : this() {
      _hasBits0 = other._hasBits0;
      type_ = other.type_;
      source_ = other.source_;
      sourceDevice_ = other.sourceDevice_;
      relay_ = other.relay_;
      timestamp_ = other.timestamp_;
      legacyMessage_ = other.legacyMessage_;
      content_ = other.content_;
      serverGuid_ = other.serverGuid_;
      serverTimestamp_ = other.serverTimestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Envelope Clone() {
      return new Envelope(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static global::libsignalservice.push.Envelope.Types.Type TypeDefaultValue = global::libsignalservice.push.Envelope.Types.Type.Unknown;

    private global::libsignalservice.push.Envelope.Types.Type type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.Envelope.Types.Type Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private readonly static string SourceDefaultValue = "";

    private string source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_ ?? SourceDefaultValue; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "source" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSource {
      get { return source_ != null; }
    }
    /// <summary>Clears the value of the "source" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSource() {
      source_ = null;
    }

    /// <summary>Field number for the "sourceDevice" field.</summary>
    public const int SourceDeviceFieldNumber = 7;
    private readonly static uint SourceDeviceDefaultValue = 0;

    private uint sourceDevice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SourceDevice {
      get { if ((_hasBits0 & 4) != 0) { return sourceDevice_; } else { return SourceDeviceDefaultValue; } }
      set {
        _hasBits0 |= 4;
        sourceDevice_ = value;
      }
    }
    /// <summary>Gets whether the "sourceDevice" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSourceDevice {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "sourceDevice" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSourceDevice() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "relay" field.</summary>
    public const int RelayFieldNumber = 3;
    private readonly static string RelayDefaultValue = "";

    private string relay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Relay {
      get { return relay_ ?? RelayDefaultValue; }
      set {
        relay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "relay" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRelay {
      get { return relay_ != null; }
    }
    /// <summary>Clears the value of the "relay" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRelay() {
      relay_ = null;
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 5;
    private readonly static ulong TimestampDefaultValue = 0UL;

    private ulong timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { if ((_hasBits0 & 2) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 2;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimestamp {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestamp() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "legacyMessage" field.</summary>
    public const int LegacyMessageFieldNumber = 6;
    private readonly static pb::ByteString LegacyMessageDefaultValue = pb::ByteString.Empty;

    private pb::ByteString legacyMessage_;
    /// <summary>
    /// Contains an encrypted DataMessage
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString LegacyMessage {
      get { return legacyMessage_ ?? LegacyMessageDefaultValue; }
      set {
        legacyMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "legacyMessage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLegacyMessage {
      get { return legacyMessage_ != null; }
    }
    /// <summary>Clears the value of the "legacyMessage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLegacyMessage() {
      legacyMessage_ = null;
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 8;
    private readonly static pb::ByteString ContentDefaultValue = pb::ByteString.Empty;

    private pb::ByteString content_;
    /// <summary>
    /// Contains an encrypted Content
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Content {
      get { return content_ ?? ContentDefaultValue; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "content" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasContent {
      get { return content_ != null; }
    }
    /// <summary>Clears the value of the "content" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContent() {
      content_ = null;
    }

    /// <summary>Field number for the "serverGuid" field.</summary>
    public const int ServerGuidFieldNumber = 9;
    private readonly static string ServerGuidDefaultValue = "";

    private string serverGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerGuid {
      get { return serverGuid_ ?? ServerGuidDefaultValue; }
      set {
        serverGuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "serverGuid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerGuid {
      get { return serverGuid_ != null; }
    }
    /// <summary>Clears the value of the "serverGuid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerGuid() {
      serverGuid_ = null;
    }

    /// <summary>Field number for the "serverTimestamp" field.</summary>
    public const int ServerTimestampFieldNumber = 10;
    private readonly static ulong ServerTimestampDefaultValue = 0UL;

    private ulong serverTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ServerTimestamp {
      get { if ((_hasBits0 & 8) != 0) { return serverTimestamp_; } else { return ServerTimestampDefaultValue; } }
      set {
        _hasBits0 |= 8;
        serverTimestamp_ = value;
      }
    }
    /// <summary>Gets whether the "serverTimestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerTimestamp {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "serverTimestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerTimestamp() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Envelope);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Envelope other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Source != other.Source) return false;
      if (SourceDevice != other.SourceDevice) return false;
      if (Relay != other.Relay) return false;
      if (Timestamp != other.Timestamp) return false;
      if (LegacyMessage != other.LegacyMessage) return false;
      if (Content != other.Content) return false;
      if (ServerGuid != other.ServerGuid) return false;
      if (ServerTimestamp != other.ServerTimestamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      if (HasSource) hash ^= Source.GetHashCode();
      if (HasSourceDevice) hash ^= SourceDevice.GetHashCode();
      if (HasRelay) hash ^= Relay.GetHashCode();
      if (HasTimestamp) hash ^= Timestamp.GetHashCode();
      if (HasLegacyMessage) hash ^= LegacyMessage.GetHashCode();
      if (HasContent) hash ^= Content.GetHashCode();
      if (HasServerGuid) hash ^= ServerGuid.GetHashCode();
      if (HasServerTimestamp) hash ^= ServerTimestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (HasSource) {
        output.WriteRawTag(18);
        output.WriteString(Source);
      }
      if (HasRelay) {
        output.WriteRawTag(26);
        output.WriteString(Relay);
      }
      if (HasTimestamp) {
        output.WriteRawTag(40);
        output.WriteUInt64(Timestamp);
      }
      if (HasLegacyMessage) {
        output.WriteRawTag(50);
        output.WriteBytes(LegacyMessage);
      }
      if (HasSourceDevice) {
        output.WriteRawTag(56);
        output.WriteUInt32(SourceDevice);
      }
      if (HasContent) {
        output.WriteRawTag(66);
        output.WriteBytes(Content);
      }
      if (HasServerGuid) {
        output.WriteRawTag(74);
        output.WriteString(ServerGuid);
      }
      if (HasServerTimestamp) {
        output.WriteRawTag(80);
        output.WriteUInt64(ServerTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (HasSource) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (HasSourceDevice) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SourceDevice);
      }
      if (HasRelay) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Relay);
      }
      if (HasTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (HasLegacyMessage) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(LegacyMessage);
      }
      if (HasContent) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
      }
      if (HasServerGuid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerGuid);
      }
      if (HasServerTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ServerTimestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Envelope other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasSource) {
        Source = other.Source;
      }
      if (other.HasSourceDevice) {
        SourceDevice = other.SourceDevice;
      }
      if (other.HasRelay) {
        Relay = other.Relay;
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      if (other.HasLegacyMessage) {
        LegacyMessage = other.LegacyMessage;
      }
      if (other.HasContent) {
        Content = other.Content;
      }
      if (other.HasServerGuid) {
        ServerGuid = other.ServerGuid;
      }
      if (other.HasServerTimestamp) {
        ServerTimestamp = other.ServerTimestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::libsignalservice.push.Envelope.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            Source = input.ReadString();
            break;
          }
          case 26: {
            Relay = input.ReadString();
            break;
          }
          case 40: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 50: {
            LegacyMessage = input.ReadBytes();
            break;
          }
          case 56: {
            SourceDevice = input.ReadUInt32();
            break;
          }
          case 66: {
            Content = input.ReadBytes();
            break;
          }
          case 74: {
            ServerGuid = input.ReadString();
            break;
          }
          case 80: {
            ServerTimestamp = input.ReadUInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Envelope message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("CIPHERTEXT")] Ciphertext = 1,
        [pbr::OriginalName("KEY_EXCHANGE")] KeyExchange = 2,
        [pbr::OriginalName("PREKEY_BUNDLE")] PrekeyBundle = 3,
        [pbr::OriginalName("RECEIPT")] Receipt = 5,
        [pbr::OriginalName("UNIDENTIFIED_SENDER")] UnidentifiedSender = 6,
      }

    }
    #endregion

  }

  public sealed partial class Content : pb::IMessage<Content> {
    private static readonly pb::MessageParser<Content> _parser = new pb::MessageParser<Content>(() => new Content());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Content> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::libsignalservice.push.SignalServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Content() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Content(Content other) : this() {
      dataMessage_ = other.dataMessage_ != null ? other.dataMessage_.Clone() : null;
      syncMessage_ = other.syncMessage_ != null ? other.syncMessage_.Clone() : null;
      callMessage_ = other.callMessage_ != null ? other.callMessage_.Clone() : null;
      nullMessage_ = other.nullMessage_ != null ? other.nullMessage_.Clone() : null;
      receiptMessage_ = other.receiptMessage_ != null ? other.receiptMessage_.Clone() : null;
      typingMessage_ = other.typingMessage_ != null ? other.typingMessage_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Content Clone() {
      return new Content(this);
    }

    /// <summary>Field number for the "dataMessage" field.</summary>
    public const int DataMessageFieldNumber = 1;
    private global::libsignalservice.push.DataMessage dataMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.DataMessage DataMessage {
      get { return dataMessage_; }
      set {
        dataMessage_ = value;
      }
    }

    /// <summary>Field number for the "syncMessage" field.</summary>
    public const int SyncMessageFieldNumber = 2;
    private global::libsignalservice.push.SyncMessage syncMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.SyncMessage SyncMessage {
      get { return syncMessage_; }
      set {
        syncMessage_ = value;
      }
    }

    /// <summary>Field number for the "callMessage" field.</summary>
    public const int CallMessageFieldNumber = 3;
    private global::libsignalservice.push.CallMessage callMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.CallMessage CallMessage {
      get { return callMessage_; }
      set {
        callMessage_ = value;
      }
    }

    /// <summary>Field number for the "nullMessage" field.</summary>
    public const int NullMessageFieldNumber = 4;
    private global::libsignalservice.push.NullMessage nullMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.NullMessage NullMessage {
      get { return nullMessage_; }
      set {
        nullMessage_ = value;
      }
    }

    /// <summary>Field number for the "receiptMessage" field.</summary>
    public const int ReceiptMessageFieldNumber = 5;
    private global::libsignalservice.push.ReceiptMessage receiptMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.ReceiptMessage ReceiptMessage {
      get { return receiptMessage_; }
      set {
        receiptMessage_ = value;
      }
    }

    /// <summary>Field number for the "typingMessage" field.</summary>
    public const int TypingMessageFieldNumber = 6;
    private global::libsignalservice.push.TypingMessage typingMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.TypingMessage TypingMessage {
      get { return typingMessage_; }
      set {
        typingMessage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Content);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Content other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DataMessage, other.DataMessage)) return false;
      if (!object.Equals(SyncMessage, other.SyncMessage)) return false;
      if (!object.Equals(CallMessage, other.CallMessage)) return false;
      if (!object.Equals(NullMessage, other.NullMessage)) return false;
      if (!object.Equals(ReceiptMessage, other.ReceiptMessage)) return false;
      if (!object.Equals(TypingMessage, other.TypingMessage)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dataMessage_ != null) hash ^= DataMessage.GetHashCode();
      if (syncMessage_ != null) hash ^= SyncMessage.GetHashCode();
      if (callMessage_ != null) hash ^= CallMessage.GetHashCode();
      if (nullMessage_ != null) hash ^= NullMessage.GetHashCode();
      if (receiptMessage_ != null) hash ^= ReceiptMessage.GetHashCode();
      if (typingMessage_ != null) hash ^= TypingMessage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dataMessage_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DataMessage);
      }
      if (syncMessage_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SyncMessage);
      }
      if (callMessage_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CallMessage);
      }
      if (nullMessage_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(NullMessage);
      }
      if (receiptMessage_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ReceiptMessage);
      }
      if (typingMessage_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TypingMessage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dataMessage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataMessage);
      }
      if (syncMessage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SyncMessage);
      }
      if (callMessage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CallMessage);
      }
      if (nullMessage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NullMessage);
      }
      if (receiptMessage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReceiptMessage);
      }
      if (typingMessage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TypingMessage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Content other) {
      if (other == null) {
        return;
      }
      if (other.dataMessage_ != null) {
        if (dataMessage_ == null) {
          DataMessage = new global::libsignalservice.push.DataMessage();
        }
        DataMessage.MergeFrom(other.DataMessage);
      }
      if (other.syncMessage_ != null) {
        if (syncMessage_ == null) {
          SyncMessage = new global::libsignalservice.push.SyncMessage();
        }
        SyncMessage.MergeFrom(other.SyncMessage);
      }
      if (other.callMessage_ != null) {
        if (callMessage_ == null) {
          CallMessage = new global::libsignalservice.push.CallMessage();
        }
        CallMessage.MergeFrom(other.CallMessage);
      }
      if (other.nullMessage_ != null) {
        if (nullMessage_ == null) {
          NullMessage = new global::libsignalservice.push.NullMessage();
        }
        NullMessage.MergeFrom(other.NullMessage);
      }
      if (other.receiptMessage_ != null) {
        if (receiptMessage_ == null) {
          ReceiptMessage = new global::libsignalservice.push.ReceiptMessage();
        }
        ReceiptMessage.MergeFrom(other.ReceiptMessage);
      }
      if (other.typingMessage_ != null) {
        if (typingMessage_ == null) {
          TypingMessage = new global::libsignalservice.push.TypingMessage();
        }
        TypingMessage.MergeFrom(other.TypingMessage);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (dataMessage_ == null) {
              DataMessage = new global::libsignalservice.push.DataMessage();
            }
            input.ReadMessage(DataMessage);
            break;
          }
          case 18: {
            if (syncMessage_ == null) {
              SyncMessage = new global::libsignalservice.push.SyncMessage();
            }
            input.ReadMessage(SyncMessage);
            break;
          }
          case 26: {
            if (callMessage_ == null) {
              CallMessage = new global::libsignalservice.push.CallMessage();
            }
            input.ReadMessage(CallMessage);
            break;
          }
          case 34: {
            if (nullMessage_ == null) {
              NullMessage = new global::libsignalservice.push.NullMessage();
            }
            input.ReadMessage(NullMessage);
            break;
          }
          case 42: {
            if (receiptMessage_ == null) {
              ReceiptMessage = new global::libsignalservice.push.ReceiptMessage();
            }
            input.ReadMessage(ReceiptMessage);
            break;
          }
          case 50: {
            if (typingMessage_ == null) {
              TypingMessage = new global::libsignalservice.push.TypingMessage();
            }
            input.ReadMessage(TypingMessage);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CallMessage : pb::IMessage<CallMessage> {
    private static readonly pb::MessageParser<CallMessage> _parser = new pb::MessageParser<CallMessage>(() => new CallMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CallMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::libsignalservice.push.SignalServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallMessage(CallMessage other) : this() {
      offer_ = other.offer_ != null ? other.offer_.Clone() : null;
      answer_ = other.answer_ != null ? other.answer_.Clone() : null;
      iceUpdate_ = other.iceUpdate_.Clone();
      hangup_ = other.hangup_ != null ? other.hangup_.Clone() : null;
      busy_ = other.busy_ != null ? other.busy_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallMessage Clone() {
      return new CallMessage(this);
    }

    /// <summary>Field number for the "offer" field.</summary>
    public const int OfferFieldNumber = 1;
    private global::libsignalservice.push.CallMessage.Types.Offer offer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.CallMessage.Types.Offer Offer {
      get { return offer_; }
      set {
        offer_ = value;
      }
    }

    /// <summary>Field number for the "answer" field.</summary>
    public const int AnswerFieldNumber = 2;
    private global::libsignalservice.push.CallMessage.Types.Answer answer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.CallMessage.Types.Answer Answer {
      get { return answer_; }
      set {
        answer_ = value;
      }
    }

    /// <summary>Field number for the "iceUpdate" field.</summary>
    public const int IceUpdateFieldNumber = 3;
    private static readonly pb::FieldCodec<global::libsignalservice.push.CallMessage.Types.IceUpdate> _repeated_iceUpdate_codec
        = pb::FieldCodec.ForMessage(26, global::libsignalservice.push.CallMessage.Types.IceUpdate.Parser);
    private readonly pbc::RepeatedField<global::libsignalservice.push.CallMessage.Types.IceUpdate> iceUpdate_ = new pbc::RepeatedField<global::libsignalservice.push.CallMessage.Types.IceUpdate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::libsignalservice.push.CallMessage.Types.IceUpdate> IceUpdate {
      get { return iceUpdate_; }
    }

    /// <summary>Field number for the "hangup" field.</summary>
    public const int HangupFieldNumber = 4;
    private global::libsignalservice.push.CallMessage.Types.Hangup hangup_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.CallMessage.Types.Hangup Hangup {
      get { return hangup_; }
      set {
        hangup_ = value;
      }
    }

    /// <summary>Field number for the "busy" field.</summary>
    public const int BusyFieldNumber = 5;
    private global::libsignalservice.push.CallMessage.Types.Busy busy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.CallMessage.Types.Busy Busy {
      get { return busy_; }
      set {
        busy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CallMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CallMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Offer, other.Offer)) return false;
      if (!object.Equals(Answer, other.Answer)) return false;
      if(!iceUpdate_.Equals(other.iceUpdate_)) return false;
      if (!object.Equals(Hangup, other.Hangup)) return false;
      if (!object.Equals(Busy, other.Busy)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (offer_ != null) hash ^= Offer.GetHashCode();
      if (answer_ != null) hash ^= Answer.GetHashCode();
      hash ^= iceUpdate_.GetHashCode();
      if (hangup_ != null) hash ^= Hangup.GetHashCode();
      if (busy_ != null) hash ^= Busy.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (offer_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Offer);
      }
      if (answer_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Answer);
      }
      iceUpdate_.WriteTo(output, _repeated_iceUpdate_codec);
      if (hangup_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Hangup);
      }
      if (busy_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Busy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (offer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Offer);
      }
      if (answer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Answer);
      }
      size += iceUpdate_.CalculateSize(_repeated_iceUpdate_codec);
      if (hangup_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hangup);
      }
      if (busy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Busy);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CallMessage other) {
      if (other == null) {
        return;
      }
      if (other.offer_ != null) {
        if (offer_ == null) {
          Offer = new global::libsignalservice.push.CallMessage.Types.Offer();
        }
        Offer.MergeFrom(other.Offer);
      }
      if (other.answer_ != null) {
        if (answer_ == null) {
          Answer = new global::libsignalservice.push.CallMessage.Types.Answer();
        }
        Answer.MergeFrom(other.Answer);
      }
      iceUpdate_.Add(other.iceUpdate_);
      if (other.hangup_ != null) {
        if (hangup_ == null) {
          Hangup = new global::libsignalservice.push.CallMessage.Types.Hangup();
        }
        Hangup.MergeFrom(other.Hangup);
      }
      if (other.busy_ != null) {
        if (busy_ == null) {
          Busy = new global::libsignalservice.push.CallMessage.Types.Busy();
        }
        Busy.MergeFrom(other.Busy);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (offer_ == null) {
              Offer = new global::libsignalservice.push.CallMessage.Types.Offer();
            }
            input.ReadMessage(Offer);
            break;
          }
          case 18: {
            if (answer_ == null) {
              Answer = new global::libsignalservice.push.CallMessage.Types.Answer();
            }
            input.ReadMessage(Answer);
            break;
          }
          case 26: {
            iceUpdate_.AddEntriesFrom(input, _repeated_iceUpdate_codec);
            break;
          }
          case 34: {
            if (hangup_ == null) {
              Hangup = new global::libsignalservice.push.CallMessage.Types.Hangup();
            }
            input.ReadMessage(Hangup);
            break;
          }
          case 42: {
            if (busy_ == null) {
              Busy = new global::libsignalservice.push.CallMessage.Types.Busy();
            }
            input.ReadMessage(Busy);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CallMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Offer : pb::IMessage<Offer> {
        private static readonly pb::MessageParser<Offer> _parser = new pb::MessageParser<Offer>(() => new Offer());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Offer> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.CallMessage.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Offer() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Offer(Offer other) : this() {
          _hasBits0 = other._hasBits0;
          id_ = other.id_;
          description_ = other.description_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Offer Clone() {
          return new Offer(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private readonly static ulong IdDefaultValue = 0UL;

        private ulong id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Id {
          get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            id_ = value;
          }
        }
        /// <summary>Gets whether the "id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "description" field.</summary>
        public const int DescriptionFieldNumber = 2;
        private readonly static string DescriptionDefaultValue = "";

        private string description_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Description {
          get { return description_ ?? DescriptionDefaultValue; }
          set {
            description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "description" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDescription {
          get { return description_ != null; }
        }
        /// <summary>Clears the value of the "description" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDescription() {
          description_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Offer);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Offer other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Description != other.Description) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasId) hash ^= Id.GetHashCode();
          if (HasDescription) hash ^= Description.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasId) {
            output.WriteRawTag(8);
            output.WriteUInt64(Id);
          }
          if (HasDescription) {
            output.WriteRawTag(18);
            output.WriteString(Description);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
          }
          if (HasDescription) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Offer other) {
          if (other == null) {
            return;
          }
          if (other.HasId) {
            Id = other.Id;
          }
          if (other.HasDescription) {
            Description = other.Description;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadUInt64();
                break;
              }
              case 18: {
                Description = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Answer : pb::IMessage<Answer> {
        private static readonly pb::MessageParser<Answer> _parser = new pb::MessageParser<Answer>(() => new Answer());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Answer> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.CallMessage.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Answer() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Answer(Answer other) : this() {
          _hasBits0 = other._hasBits0;
          id_ = other.id_;
          description_ = other.description_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Answer Clone() {
          return new Answer(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private readonly static ulong IdDefaultValue = 0UL;

        private ulong id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Id {
          get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            id_ = value;
          }
        }
        /// <summary>Gets whether the "id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "description" field.</summary>
        public const int DescriptionFieldNumber = 2;
        private readonly static string DescriptionDefaultValue = "";

        private string description_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Description {
          get { return description_ ?? DescriptionDefaultValue; }
          set {
            description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "description" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDescription {
          get { return description_ != null; }
        }
        /// <summary>Clears the value of the "description" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDescription() {
          description_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Answer);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Answer other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Description != other.Description) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasId) hash ^= Id.GetHashCode();
          if (HasDescription) hash ^= Description.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasId) {
            output.WriteRawTag(8);
            output.WriteUInt64(Id);
          }
          if (HasDescription) {
            output.WriteRawTag(18);
            output.WriteString(Description);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
          }
          if (HasDescription) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Answer other) {
          if (other == null) {
            return;
          }
          if (other.HasId) {
            Id = other.Id;
          }
          if (other.HasDescription) {
            Description = other.Description;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadUInt64();
                break;
              }
              case 18: {
                Description = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class IceUpdate : pb::IMessage<IceUpdate> {
        private static readonly pb::MessageParser<IceUpdate> _parser = new pb::MessageParser<IceUpdate>(() => new IceUpdate());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<IceUpdate> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.CallMessage.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IceUpdate() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IceUpdate(IceUpdate other) : this() {
          _hasBits0 = other._hasBits0;
          id_ = other.id_;
          sdpMid_ = other.sdpMid_;
          sdpMLineIndex_ = other.sdpMLineIndex_;
          sdp_ = other.sdp_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IceUpdate Clone() {
          return new IceUpdate(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private readonly static ulong IdDefaultValue = 0UL;

        private ulong id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Id {
          get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            id_ = value;
          }
        }
        /// <summary>Gets whether the "id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "sdpMid" field.</summary>
        public const int SdpMidFieldNumber = 2;
        private readonly static string SdpMidDefaultValue = "";

        private string sdpMid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SdpMid {
          get { return sdpMid_ ?? SdpMidDefaultValue; }
          set {
            sdpMid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "sdpMid" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSdpMid {
          get { return sdpMid_ != null; }
        }
        /// <summary>Clears the value of the "sdpMid" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSdpMid() {
          sdpMid_ = null;
        }

        /// <summary>Field number for the "sdpMLineIndex" field.</summary>
        public const int SdpMLineIndexFieldNumber = 3;
        private readonly static uint SdpMLineIndexDefaultValue = 0;

        private uint sdpMLineIndex_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SdpMLineIndex {
          get { if ((_hasBits0 & 2) != 0) { return sdpMLineIndex_; } else { return SdpMLineIndexDefaultValue; } }
          set {
            _hasBits0 |= 2;
            sdpMLineIndex_ = value;
          }
        }
        /// <summary>Gets whether the "sdpMLineIndex" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSdpMLineIndex {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "sdpMLineIndex" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSdpMLineIndex() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "sdp" field.</summary>
        public const int SdpFieldNumber = 4;
        private readonly static string SdpDefaultValue = "";

        private string sdp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Sdp {
          get { return sdp_ ?? SdpDefaultValue; }
          set {
            sdp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "sdp" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSdp {
          get { return sdp_ != null; }
        }
        /// <summary>Clears the value of the "sdp" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSdp() {
          sdp_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as IceUpdate);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(IceUpdate other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (SdpMid != other.SdpMid) return false;
          if (SdpMLineIndex != other.SdpMLineIndex) return false;
          if (Sdp != other.Sdp) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasId) hash ^= Id.GetHashCode();
          if (HasSdpMid) hash ^= SdpMid.GetHashCode();
          if (HasSdpMLineIndex) hash ^= SdpMLineIndex.GetHashCode();
          if (HasSdp) hash ^= Sdp.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasId) {
            output.WriteRawTag(8);
            output.WriteUInt64(Id);
          }
          if (HasSdpMid) {
            output.WriteRawTag(18);
            output.WriteString(SdpMid);
          }
          if (HasSdpMLineIndex) {
            output.WriteRawTag(24);
            output.WriteUInt32(SdpMLineIndex);
          }
          if (HasSdp) {
            output.WriteRawTag(34);
            output.WriteString(Sdp);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
          }
          if (HasSdpMid) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SdpMid);
          }
          if (HasSdpMLineIndex) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SdpMLineIndex);
          }
          if (HasSdp) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Sdp);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(IceUpdate other) {
          if (other == null) {
            return;
          }
          if (other.HasId) {
            Id = other.Id;
          }
          if (other.HasSdpMid) {
            SdpMid = other.SdpMid;
          }
          if (other.HasSdpMLineIndex) {
            SdpMLineIndex = other.SdpMLineIndex;
          }
          if (other.HasSdp) {
            Sdp = other.Sdp;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadUInt64();
                break;
              }
              case 18: {
                SdpMid = input.ReadString();
                break;
              }
              case 24: {
                SdpMLineIndex = input.ReadUInt32();
                break;
              }
              case 34: {
                Sdp = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Busy : pb::IMessage<Busy> {
        private static readonly pb::MessageParser<Busy> _parser = new pb::MessageParser<Busy>(() => new Busy());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Busy> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.CallMessage.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Busy() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Busy(Busy other) : this() {
          _hasBits0 = other._hasBits0;
          id_ = other.id_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Busy Clone() {
          return new Busy(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private readonly static ulong IdDefaultValue = 0UL;

        private ulong id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Id {
          get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            id_ = value;
          }
        }
        /// <summary>Gets whether the "id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearId() {
          _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Busy);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Busy other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasId) hash ^= Id.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasId) {
            output.WriteRawTag(8);
            output.WriteUInt64(Id);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Busy other) {
          if (other == null) {
            return;
          }
          if (other.HasId) {
            Id = other.Id;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Hangup : pb::IMessage<Hangup> {
        private static readonly pb::MessageParser<Hangup> _parser = new pb::MessageParser<Hangup>(() => new Hangup());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Hangup> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.CallMessage.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Hangup() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Hangup(Hangup other) : this() {
          _hasBits0 = other._hasBits0;
          id_ = other.id_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Hangup Clone() {
          return new Hangup(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private readonly static ulong IdDefaultValue = 0UL;

        private ulong id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Id {
          get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            id_ = value;
          }
        }
        /// <summary>Gets whether the "id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearId() {
          _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Hangup);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Hangup other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasId) hash ^= Id.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasId) {
            output.WriteRawTag(8);
            output.WriteUInt64(Id);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Hangup other) {
          if (other == null) {
            return;
          }
          if (other.HasId) {
            Id = other.Id;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class DataMessage : pb::IMessage<DataMessage> {
    private static readonly pb::MessageParser<DataMessage> _parser = new pb::MessageParser<DataMessage>(() => new DataMessage());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::libsignalservice.push.SignalServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataMessage(DataMessage other) : this() {
      _hasBits0 = other._hasBits0;
      body_ = other.body_;
      attachments_ = other.attachments_.Clone();
      group_ = other.group_ != null ? other.group_.Clone() : null;
      flags_ = other.flags_;
      expireTimer_ = other.expireTimer_;
      profileKey_ = other.profileKey_;
      timestamp_ = other.timestamp_;
      quote_ = other.quote_ != null ? other.quote_.Clone() : null;
      contact_ = other.contact_.Clone();
      preview_ = other.preview_.Clone();
      sticker_ = other.sticker_ != null ? other.sticker_.Clone() : null;
      requiredProtocolVersion_ = other.requiredProtocolVersion_;
      messageTimer_ = other.messageTimer_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataMessage Clone() {
      return new DataMessage(this);
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 1;
    private readonly static string BodyDefaultValue = "";

    private string body_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Body {
      get { return body_ ?? BodyDefaultValue; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "body" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBody {
      get { return body_ != null; }
    }
    /// <summary>Clears the value of the "body" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBody() {
      body_ = null;
    }

    /// <summary>Field number for the "attachments" field.</summary>
    public const int AttachmentsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::libsignalservice.push.AttachmentPointer> _repeated_attachments_codec
        = pb::FieldCodec.ForMessage(18, global::libsignalservice.push.AttachmentPointer.Parser);
    private readonly pbc::RepeatedField<global::libsignalservice.push.AttachmentPointer> attachments_ = new pbc::RepeatedField<global::libsignalservice.push.AttachmentPointer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::libsignalservice.push.AttachmentPointer> Attachments {
      get { return attachments_; }
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 3;
    private global::libsignalservice.push.GroupContext group_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.GroupContext Group {
      get { return group_; }
      set {
        group_ = value;
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 4;
    private readonly static uint FlagsDefaultValue = 0;

    private uint flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flags {
      get { if ((_hasBits0 & 1) != 0) { return flags_; } else { return FlagsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        flags_ = value;
      }
    }
    /// <summary>Gets whether the "flags" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFlags {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "flags" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFlags() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "expireTimer" field.</summary>
    public const int ExpireTimerFieldNumber = 5;
    private readonly static uint ExpireTimerDefaultValue = 0;

    private uint expireTimer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExpireTimer {
      get { if ((_hasBits0 & 2) != 0) { return expireTimer_; } else { return ExpireTimerDefaultValue; } }
      set {
        _hasBits0 |= 2;
        expireTimer_ = value;
      }
    }
    /// <summary>Gets whether the "expireTimer" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExpireTimer {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "expireTimer" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExpireTimer() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "profileKey" field.</summary>
    public const int ProfileKeyFieldNumber = 6;
    private readonly static pb::ByteString ProfileKeyDefaultValue = pb::ByteString.Empty;

    private pb::ByteString profileKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ProfileKey {
      get { return profileKey_ ?? ProfileKeyDefaultValue; }
      set {
        profileKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "profileKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProfileKey {
      get { return profileKey_ != null; }
    }
    /// <summary>Clears the value of the "profileKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProfileKey() {
      profileKey_ = null;
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 7;
    private readonly static ulong TimestampDefaultValue = 0UL;

    private ulong timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { if ((_hasBits0 & 4) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 4;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimestamp {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestamp() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "quote" field.</summary>
    public const int QuoteFieldNumber = 8;
    private global::libsignalservice.push.DataMessage.Types.Quote quote_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.DataMessage.Types.Quote Quote {
      get { return quote_; }
      set {
        quote_ = value;
      }
    }

    /// <summary>Field number for the "contact" field.</summary>
    public const int ContactFieldNumber = 9;
    private static readonly pb::FieldCodec<global::libsignalservice.push.DataMessage.Types.Contact> _repeated_contact_codec
        = pb::FieldCodec.ForMessage(74, global::libsignalservice.push.DataMessage.Types.Contact.Parser);
    private readonly pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.Contact> contact_ = new pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.Contact>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.Contact> Contact {
      get { return contact_; }
    }

    /// <summary>Field number for the "preview" field.</summary>
    public const int PreviewFieldNumber = 10;
    private static readonly pb::FieldCodec<global::libsignalservice.push.DataMessage.Types.Preview> _repeated_preview_codec
        = pb::FieldCodec.ForMessage(82, global::libsignalservice.push.DataMessage.Types.Preview.Parser);
    private readonly pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.Preview> preview_ = new pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.Preview>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.Preview> Preview {
      get { return preview_; }
    }

    /// <summary>Field number for the "sticker" field.</summary>
    public const int StickerFieldNumber = 11;
    private global::libsignalservice.push.DataMessage.Types.Sticker sticker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.DataMessage.Types.Sticker Sticker {
      get { return sticker_; }
      set {
        sticker_ = value;
      }
    }

    /// <summary>Field number for the "requiredProtocolVersion" field.</summary>
    public const int RequiredProtocolVersionFieldNumber = 12;
    private readonly static uint RequiredProtocolVersionDefaultValue = 0;

    private uint requiredProtocolVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RequiredProtocolVersion {
      get { if ((_hasBits0 & 8) != 0) { return requiredProtocolVersion_; } else { return RequiredProtocolVersionDefaultValue; } }
      set {
        _hasBits0 |= 8;
        requiredProtocolVersion_ = value;
      }
    }
    /// <summary>Gets whether the "requiredProtocolVersion" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequiredProtocolVersion {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "requiredProtocolVersion" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequiredProtocolVersion() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "messageTimer" field.</summary>
    public const int MessageTimerFieldNumber = 13;
    private readonly static uint MessageTimerDefaultValue = 0;

    private uint messageTimer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MessageTimer {
      get { if ((_hasBits0 & 16) != 0) { return messageTimer_; } else { return MessageTimerDefaultValue; } }
      set {
        _hasBits0 |= 16;
        messageTimer_ = value;
      }
    }
    /// <summary>Gets whether the "messageTimer" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessageTimer {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "messageTimer" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessageTimer() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Body != other.Body) return false;
      if(!attachments_.Equals(other.attachments_)) return false;
      if (!object.Equals(Group, other.Group)) return false;
      if (Flags != other.Flags) return false;
      if (ExpireTimer != other.ExpireTimer) return false;
      if (ProfileKey != other.ProfileKey) return false;
      if (Timestamp != other.Timestamp) return false;
      if (!object.Equals(Quote, other.Quote)) return false;
      if(!contact_.Equals(other.contact_)) return false;
      if(!preview_.Equals(other.preview_)) return false;
      if (!object.Equals(Sticker, other.Sticker)) return false;
      if (RequiredProtocolVersion != other.RequiredProtocolVersion) return false;
      if (MessageTimer != other.MessageTimer) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBody) hash ^= Body.GetHashCode();
      hash ^= attachments_.GetHashCode();
      if (group_ != null) hash ^= Group.GetHashCode();
      if (HasFlags) hash ^= Flags.GetHashCode();
      if (HasExpireTimer) hash ^= ExpireTimer.GetHashCode();
      if (HasProfileKey) hash ^= ProfileKey.GetHashCode();
      if (HasTimestamp) hash ^= Timestamp.GetHashCode();
      if (quote_ != null) hash ^= Quote.GetHashCode();
      hash ^= contact_.GetHashCode();
      hash ^= preview_.GetHashCode();
      if (sticker_ != null) hash ^= Sticker.GetHashCode();
      if (HasRequiredProtocolVersion) hash ^= RequiredProtocolVersion.GetHashCode();
      if (HasMessageTimer) hash ^= MessageTimer.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasBody) {
        output.WriteRawTag(10);
        output.WriteString(Body);
      }
      attachments_.WriteTo(output, _repeated_attachments_codec);
      if (group_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Group);
      }
      if (HasFlags) {
        output.WriteRawTag(32);
        output.WriteUInt32(Flags);
      }
      if (HasExpireTimer) {
        output.WriteRawTag(40);
        output.WriteUInt32(ExpireTimer);
      }
      if (HasProfileKey) {
        output.WriteRawTag(50);
        output.WriteBytes(ProfileKey);
      }
      if (HasTimestamp) {
        output.WriteRawTag(56);
        output.WriteUInt64(Timestamp);
      }
      if (quote_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Quote);
      }
      contact_.WriteTo(output, _repeated_contact_codec);
      preview_.WriteTo(output, _repeated_preview_codec);
      if (sticker_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Sticker);
      }
      if (HasRequiredProtocolVersion) {
        output.WriteRawTag(96);
        output.WriteUInt32(RequiredProtocolVersion);
      }
      if (HasMessageTimer) {
        output.WriteRawTag(104);
        output.WriteUInt32(MessageTimer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasBody) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Body);
      }
      size += attachments_.CalculateSize(_repeated_attachments_codec);
      if (group_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Group);
      }
      if (HasFlags) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
      }
      if (HasExpireTimer) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExpireTimer);
      }
      if (HasProfileKey) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ProfileKey);
      }
      if (HasTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (quote_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Quote);
      }
      size += contact_.CalculateSize(_repeated_contact_codec);
      size += preview_.CalculateSize(_repeated_preview_codec);
      if (sticker_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sticker);
      }
      if (HasRequiredProtocolVersion) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequiredProtocolVersion);
      }
      if (HasMessageTimer) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MessageTimer);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataMessage other) {
      if (other == null) {
        return;
      }
      if (other.HasBody) {
        Body = other.Body;
      }
      attachments_.Add(other.attachments_);
      if (other.group_ != null) {
        if (group_ == null) {
          Group = new global::libsignalservice.push.GroupContext();
        }
        Group.MergeFrom(other.Group);
      }
      if (other.HasFlags) {
        Flags = other.Flags;
      }
      if (other.HasExpireTimer) {
        ExpireTimer = other.ExpireTimer;
      }
      if (other.HasProfileKey) {
        ProfileKey = other.ProfileKey;
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      if (other.quote_ != null) {
        if (quote_ == null) {
          Quote = new global::libsignalservice.push.DataMessage.Types.Quote();
        }
        Quote.MergeFrom(other.Quote);
      }
      contact_.Add(other.contact_);
      preview_.Add(other.preview_);
      if (other.sticker_ != null) {
        if (sticker_ == null) {
          Sticker = new global::libsignalservice.push.DataMessage.Types.Sticker();
        }
        Sticker.MergeFrom(other.Sticker);
      }
      if (other.HasRequiredProtocolVersion) {
        RequiredProtocolVersion = other.RequiredProtocolVersion;
      }
      if (other.HasMessageTimer) {
        MessageTimer = other.MessageTimer;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Body = input.ReadString();
            break;
          }
          case 18: {
            attachments_.AddEntriesFrom(input, _repeated_attachments_codec);
            break;
          }
          case 26: {
            if (group_ == null) {
              Group = new global::libsignalservice.push.GroupContext();
            }
            input.ReadMessage(Group);
            break;
          }
          case 32: {
            Flags = input.ReadUInt32();
            break;
          }
          case 40: {
            ExpireTimer = input.ReadUInt32();
            break;
          }
          case 50: {
            ProfileKey = input.ReadBytes();
            break;
          }
          case 56: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 66: {
            if (quote_ == null) {
              Quote = new global::libsignalservice.push.DataMessage.Types.Quote();
            }
            input.ReadMessage(Quote);
            break;
          }
          case 74: {
            contact_.AddEntriesFrom(input, _repeated_contact_codec);
            break;
          }
          case 82: {
            preview_.AddEntriesFrom(input, _repeated_preview_codec);
            break;
          }
          case 90: {
            if (sticker_ == null) {
              Sticker = new global::libsignalservice.push.DataMessage.Types.Sticker();
            }
            input.ReadMessage(Sticker);
            break;
          }
          case 96: {
            RequiredProtocolVersion = input.ReadUInt32();
            break;
          }
          case 104: {
            MessageTimer = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DataMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Flags {
        [pbr::OriginalName("END_SESSION")] EndSession = 1,
        [pbr::OriginalName("EXPIRATION_TIMER_UPDATE")] ExpirationTimerUpdate = 2,
        [pbr::OriginalName("PROFILE_KEY_UPDATE")] ProfileKeyUpdate = 4,
      }

      public enum ProtocolVersion {
        [pbr::OriginalName("INITIAL")] Initial = 0,
        [pbr::OriginalName("MESSAGE_TIMERS")] MessageTimers = 1,
        [pbr::OriginalName("CURRENT", PreferredAlias = false)] Current = 1,
      }

      public sealed partial class Quote : pb::IMessage<Quote> {
        private static readonly pb::MessageParser<Quote> _parser = new pb::MessageParser<Quote>(() => new Quote());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Quote> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.DataMessage.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Quote() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Quote(Quote other) : this() {
          _hasBits0 = other._hasBits0;
          id_ = other.id_;
          author_ = other.author_;
          text_ = other.text_;
          attachments_ = other.attachments_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Quote Clone() {
          return new Quote(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private readonly static ulong IdDefaultValue = 0UL;

        private ulong id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Id {
          get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            id_ = value;
          }
        }
        /// <summary>Gets whether the "id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "author" field.</summary>
        public const int AuthorFieldNumber = 2;
        private readonly static string AuthorDefaultValue = "";

        private string author_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Author {
          get { return author_ ?? AuthorDefaultValue; }
          set {
            author_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "author" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAuthor {
          get { return author_ != null; }
        }
        /// <summary>Clears the value of the "author" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAuthor() {
          author_ = null;
        }

        /// <summary>Field number for the "text" field.</summary>
        public const int TextFieldNumber = 3;
        private readonly static string TextDefaultValue = "";

        private string text_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Text {
          get { return text_ ?? TextDefaultValue; }
          set {
            text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "text" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasText {
          get { return text_ != null; }
        }
        /// <summary>Clears the value of the "text" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearText() {
          text_ = null;
        }

        /// <summary>Field number for the "attachments" field.</summary>
        public const int AttachmentsFieldNumber = 4;
        private static readonly pb::FieldCodec<global::libsignalservice.push.DataMessage.Types.Quote.Types.QuotedAttachment> _repeated_attachments_codec
            = pb::FieldCodec.ForMessage(34, global::libsignalservice.push.DataMessage.Types.Quote.Types.QuotedAttachment.Parser);
        private readonly pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.Quote.Types.QuotedAttachment> attachments_ = new pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.Quote.Types.QuotedAttachment>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.Quote.Types.QuotedAttachment> Attachments {
          get { return attachments_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Quote);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Quote other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Author != other.Author) return false;
          if (Text != other.Text) return false;
          if(!attachments_.Equals(other.attachments_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasId) hash ^= Id.GetHashCode();
          if (HasAuthor) hash ^= Author.GetHashCode();
          if (HasText) hash ^= Text.GetHashCode();
          hash ^= attachments_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasId) {
            output.WriteRawTag(8);
            output.WriteUInt64(Id);
          }
          if (HasAuthor) {
            output.WriteRawTag(18);
            output.WriteString(Author);
          }
          if (HasText) {
            output.WriteRawTag(26);
            output.WriteString(Text);
          }
          attachments_.WriteTo(output, _repeated_attachments_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
          }
          if (HasAuthor) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Author);
          }
          if (HasText) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
          }
          size += attachments_.CalculateSize(_repeated_attachments_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Quote other) {
          if (other == null) {
            return;
          }
          if (other.HasId) {
            Id = other.Id;
          }
          if (other.HasAuthor) {
            Author = other.Author;
          }
          if (other.HasText) {
            Text = other.Text;
          }
          attachments_.Add(other.attachments_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadUInt64();
                break;
              }
              case 18: {
                Author = input.ReadString();
                break;
              }
              case 26: {
                Text = input.ReadString();
                break;
              }
              case 34: {
                attachments_.AddEntriesFrom(input, _repeated_attachments_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Quote message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class QuotedAttachment : pb::IMessage<QuotedAttachment> {
            private static readonly pb::MessageParser<QuotedAttachment> _parser = new pb::MessageParser<QuotedAttachment>(() => new QuotedAttachment());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<QuotedAttachment> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::libsignalservice.push.DataMessage.Types.Quote.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public QuotedAttachment() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public QuotedAttachment(QuotedAttachment other) : this() {
              contentType_ = other.contentType_;
              fileName_ = other.fileName_;
              thumbnail_ = other.thumbnail_ != null ? other.thumbnail_.Clone() : null;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public QuotedAttachment Clone() {
              return new QuotedAttachment(this);
            }

            /// <summary>Field number for the "contentType" field.</summary>
            public const int ContentTypeFieldNumber = 1;
            private readonly static string ContentTypeDefaultValue = "";

            private string contentType_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string ContentType {
              get { return contentType_ ?? ContentTypeDefaultValue; }
              set {
                contentType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "contentType" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasContentType {
              get { return contentType_ != null; }
            }
            /// <summary>Clears the value of the "contentType" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearContentType() {
              contentType_ = null;
            }

            /// <summary>Field number for the "fileName" field.</summary>
            public const int FileNameFieldNumber = 2;
            private readonly static string FileNameDefaultValue = "";

            private string fileName_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string FileName {
              get { return fileName_ ?? FileNameDefaultValue; }
              set {
                fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "fileName" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasFileName {
              get { return fileName_ != null; }
            }
            /// <summary>Clears the value of the "fileName" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearFileName() {
              fileName_ = null;
            }

            /// <summary>Field number for the "thumbnail" field.</summary>
            public const int ThumbnailFieldNumber = 3;
            private global::libsignalservice.push.AttachmentPointer thumbnail_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::libsignalservice.push.AttachmentPointer Thumbnail {
              get { return thumbnail_; }
              set {
                thumbnail_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as QuotedAttachment);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(QuotedAttachment other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (ContentType != other.ContentType) return false;
              if (FileName != other.FileName) return false;
              if (!object.Equals(Thumbnail, other.Thumbnail)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasContentType) hash ^= ContentType.GetHashCode();
              if (HasFileName) hash ^= FileName.GetHashCode();
              if (thumbnail_ != null) hash ^= Thumbnail.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (HasContentType) {
                output.WriteRawTag(10);
                output.WriteString(ContentType);
              }
              if (HasFileName) {
                output.WriteRawTag(18);
                output.WriteString(FileName);
              }
              if (thumbnail_ != null) {
                output.WriteRawTag(26);
                output.WriteMessage(Thumbnail);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasContentType) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ContentType);
              }
              if (HasFileName) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
              }
              if (thumbnail_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Thumbnail);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(QuotedAttachment other) {
              if (other == null) {
                return;
              }
              if (other.HasContentType) {
                ContentType = other.ContentType;
              }
              if (other.HasFileName) {
                FileName = other.FileName;
              }
              if (other.thumbnail_ != null) {
                if (thumbnail_ == null) {
                  Thumbnail = new global::libsignalservice.push.AttachmentPointer();
                }
                Thumbnail.MergeFrom(other.Thumbnail);
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    ContentType = input.ReadString();
                    break;
                  }
                  case 18: {
                    FileName = input.ReadString();
                    break;
                  }
                  case 26: {
                    if (thumbnail_ == null) {
                      Thumbnail = new global::libsignalservice.push.AttachmentPointer();
                    }
                    input.ReadMessage(Thumbnail);
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class Contact : pb::IMessage<Contact> {
        private static readonly pb::MessageParser<Contact> _parser = new pb::MessageParser<Contact>(() => new Contact());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Contact> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.DataMessage.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Contact() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Contact(Contact other) : this() {
          name_ = other.name_ != null ? other.name_.Clone() : null;
          number_ = other.number_.Clone();
          email_ = other.email_.Clone();
          address_ = other.address_.Clone();
          avatar_ = other.avatar_ != null ? other.avatar_.Clone() : null;
          organization_ = other.organization_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Contact Clone() {
          return new Contact(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private global::libsignalservice.push.DataMessage.Types.Contact.Types.Name name_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::libsignalservice.push.DataMessage.Types.Contact.Types.Name Name {
          get { return name_; }
          set {
            name_ = value;
          }
        }

        /// <summary>Field number for the "number" field.</summary>
        public const int NumberFieldNumber = 3;
        private static readonly pb::FieldCodec<global::libsignalservice.push.DataMessage.Types.Contact.Types.Phone> _repeated_number_codec
            = pb::FieldCodec.ForMessage(26, global::libsignalservice.push.DataMessage.Types.Contact.Types.Phone.Parser);
        private readonly pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.Contact.Types.Phone> number_ = new pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.Contact.Types.Phone>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.Contact.Types.Phone> Number {
          get { return number_; }
        }

        /// <summary>Field number for the "email" field.</summary>
        public const int EmailFieldNumber = 4;
        private static readonly pb::FieldCodec<global::libsignalservice.push.DataMessage.Types.Contact.Types.Email> _repeated_email_codec
            = pb::FieldCodec.ForMessage(34, global::libsignalservice.push.DataMessage.Types.Contact.Types.Email.Parser);
        private readonly pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.Contact.Types.Email> email_ = new pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.Contact.Types.Email>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.Contact.Types.Email> Email {
          get { return email_; }
        }

        /// <summary>Field number for the "address" field.</summary>
        public const int AddressFieldNumber = 5;
        private static readonly pb::FieldCodec<global::libsignalservice.push.DataMessage.Types.Contact.Types.PostalAddress> _repeated_address_codec
            = pb::FieldCodec.ForMessage(42, global::libsignalservice.push.DataMessage.Types.Contact.Types.PostalAddress.Parser);
        private readonly pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.Contact.Types.PostalAddress> address_ = new pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.Contact.Types.PostalAddress>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.Contact.Types.PostalAddress> Address {
          get { return address_; }
        }

        /// <summary>Field number for the "avatar" field.</summary>
        public const int AvatarFieldNumber = 6;
        private global::libsignalservice.push.DataMessage.Types.Contact.Types.Avatar avatar_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::libsignalservice.push.DataMessage.Types.Contact.Types.Avatar Avatar {
          get { return avatar_; }
          set {
            avatar_ = value;
          }
        }

        /// <summary>Field number for the "organization" field.</summary>
        public const int OrganizationFieldNumber = 7;
        private readonly static string OrganizationDefaultValue = "";

        private string organization_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Organization {
          get { return organization_ ?? OrganizationDefaultValue; }
          set {
            organization_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "organization" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasOrganization {
          get { return organization_ != null; }
        }
        /// <summary>Clears the value of the "organization" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearOrganization() {
          organization_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Contact);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Contact other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Name, other.Name)) return false;
          if(!number_.Equals(other.number_)) return false;
          if(!email_.Equals(other.email_)) return false;
          if(!address_.Equals(other.address_)) return false;
          if (!object.Equals(Avatar, other.Avatar)) return false;
          if (Organization != other.Organization) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (name_ != null) hash ^= Name.GetHashCode();
          hash ^= number_.GetHashCode();
          hash ^= email_.GetHashCode();
          hash ^= address_.GetHashCode();
          if (avatar_ != null) hash ^= Avatar.GetHashCode();
          if (HasOrganization) hash ^= Organization.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (name_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Name);
          }
          number_.WriteTo(output, _repeated_number_codec);
          email_.WriteTo(output, _repeated_email_codec);
          address_.WriteTo(output, _repeated_address_codec);
          if (avatar_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(Avatar);
          }
          if (HasOrganization) {
            output.WriteRawTag(58);
            output.WriteString(Organization);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (name_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Name);
          }
          size += number_.CalculateSize(_repeated_number_codec);
          size += email_.CalculateSize(_repeated_email_codec);
          size += address_.CalculateSize(_repeated_address_codec);
          if (avatar_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Avatar);
          }
          if (HasOrganization) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Organization);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Contact other) {
          if (other == null) {
            return;
          }
          if (other.name_ != null) {
            if (name_ == null) {
              Name = new global::libsignalservice.push.DataMessage.Types.Contact.Types.Name();
            }
            Name.MergeFrom(other.Name);
          }
          number_.Add(other.number_);
          email_.Add(other.email_);
          address_.Add(other.address_);
          if (other.avatar_ != null) {
            if (avatar_ == null) {
              Avatar = new global::libsignalservice.push.DataMessage.Types.Contact.Types.Avatar();
            }
            Avatar.MergeFrom(other.Avatar);
          }
          if (other.HasOrganization) {
            Organization = other.Organization;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (name_ == null) {
                  Name = new global::libsignalservice.push.DataMessage.Types.Contact.Types.Name();
                }
                input.ReadMessage(Name);
                break;
              }
              case 26: {
                number_.AddEntriesFrom(input, _repeated_number_codec);
                break;
              }
              case 34: {
                email_.AddEntriesFrom(input, _repeated_email_codec);
                break;
              }
              case 42: {
                address_.AddEntriesFrom(input, _repeated_address_codec);
                break;
              }
              case 50: {
                if (avatar_ == null) {
                  Avatar = new global::libsignalservice.push.DataMessage.Types.Contact.Types.Avatar();
                }
                input.ReadMessage(Avatar);
                break;
              }
              case 58: {
                Organization = input.ReadString();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Contact message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class Name : pb::IMessage<Name> {
            private static readonly pb::MessageParser<Name> _parser = new pb::MessageParser<Name>(() => new Name());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Name> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::libsignalservice.push.DataMessage.Types.Contact.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Name() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Name(Name other) : this() {
              givenName_ = other.givenName_;
              familyName_ = other.familyName_;
              prefix_ = other.prefix_;
              suffix_ = other.suffix_;
              middleName_ = other.middleName_;
              displayName_ = other.displayName_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Name Clone() {
              return new Name(this);
            }

            /// <summary>Field number for the "givenName" field.</summary>
            public const int GivenNameFieldNumber = 1;
            private readonly static string GivenNameDefaultValue = "";

            private string givenName_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string GivenName {
              get { return givenName_ ?? GivenNameDefaultValue; }
              set {
                givenName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "givenName" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasGivenName {
              get { return givenName_ != null; }
            }
            /// <summary>Clears the value of the "givenName" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearGivenName() {
              givenName_ = null;
            }

            /// <summary>Field number for the "familyName" field.</summary>
            public const int FamilyNameFieldNumber = 2;
            private readonly static string FamilyNameDefaultValue = "";

            private string familyName_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string FamilyName {
              get { return familyName_ ?? FamilyNameDefaultValue; }
              set {
                familyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "familyName" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasFamilyName {
              get { return familyName_ != null; }
            }
            /// <summary>Clears the value of the "familyName" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearFamilyName() {
              familyName_ = null;
            }

            /// <summary>Field number for the "prefix" field.</summary>
            public const int PrefixFieldNumber = 3;
            private readonly static string PrefixDefaultValue = "";

            private string prefix_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Prefix {
              get { return prefix_ ?? PrefixDefaultValue; }
              set {
                prefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "prefix" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasPrefix {
              get { return prefix_ != null; }
            }
            /// <summary>Clears the value of the "prefix" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearPrefix() {
              prefix_ = null;
            }

            /// <summary>Field number for the "suffix" field.</summary>
            public const int SuffixFieldNumber = 4;
            private readonly static string SuffixDefaultValue = "";

            private string suffix_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Suffix {
              get { return suffix_ ?? SuffixDefaultValue; }
              set {
                suffix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "suffix" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasSuffix {
              get { return suffix_ != null; }
            }
            /// <summary>Clears the value of the "suffix" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearSuffix() {
              suffix_ = null;
            }

            /// <summary>Field number for the "middleName" field.</summary>
            public const int MiddleNameFieldNumber = 5;
            private readonly static string MiddleNameDefaultValue = "";

            private string middleName_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string MiddleName {
              get { return middleName_ ?? MiddleNameDefaultValue; }
              set {
                middleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "middleName" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasMiddleName {
              get { return middleName_ != null; }
            }
            /// <summary>Clears the value of the "middleName" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearMiddleName() {
              middleName_ = null;
            }

            /// <summary>Field number for the "displayName" field.</summary>
            public const int DisplayNameFieldNumber = 6;
            private readonly static string DisplayNameDefaultValue = "";

            private string displayName_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string DisplayName {
              get { return displayName_ ?? DisplayNameDefaultValue; }
              set {
                displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "displayName" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasDisplayName {
              get { return displayName_ != null; }
            }
            /// <summary>Clears the value of the "displayName" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearDisplayName() {
              displayName_ = null;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Name);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Name other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (GivenName != other.GivenName) return false;
              if (FamilyName != other.FamilyName) return false;
              if (Prefix != other.Prefix) return false;
              if (Suffix != other.Suffix) return false;
              if (MiddleName != other.MiddleName) return false;
              if (DisplayName != other.DisplayName) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasGivenName) hash ^= GivenName.GetHashCode();
              if (HasFamilyName) hash ^= FamilyName.GetHashCode();
              if (HasPrefix) hash ^= Prefix.GetHashCode();
              if (HasSuffix) hash ^= Suffix.GetHashCode();
              if (HasMiddleName) hash ^= MiddleName.GetHashCode();
              if (HasDisplayName) hash ^= DisplayName.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (HasGivenName) {
                output.WriteRawTag(10);
                output.WriteString(GivenName);
              }
              if (HasFamilyName) {
                output.WriteRawTag(18);
                output.WriteString(FamilyName);
              }
              if (HasPrefix) {
                output.WriteRawTag(26);
                output.WriteString(Prefix);
              }
              if (HasSuffix) {
                output.WriteRawTag(34);
                output.WriteString(Suffix);
              }
              if (HasMiddleName) {
                output.WriteRawTag(42);
                output.WriteString(MiddleName);
              }
              if (HasDisplayName) {
                output.WriteRawTag(50);
                output.WriteString(DisplayName);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasGivenName) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(GivenName);
              }
              if (HasFamilyName) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(FamilyName);
              }
              if (HasPrefix) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Prefix);
              }
              if (HasSuffix) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Suffix);
              }
              if (HasMiddleName) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(MiddleName);
              }
              if (HasDisplayName) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Name other) {
              if (other == null) {
                return;
              }
              if (other.HasGivenName) {
                GivenName = other.GivenName;
              }
              if (other.HasFamilyName) {
                FamilyName = other.FamilyName;
              }
              if (other.HasPrefix) {
                Prefix = other.Prefix;
              }
              if (other.HasSuffix) {
                Suffix = other.Suffix;
              }
              if (other.HasMiddleName) {
                MiddleName = other.MiddleName;
              }
              if (other.HasDisplayName) {
                DisplayName = other.DisplayName;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    GivenName = input.ReadString();
                    break;
                  }
                  case 18: {
                    FamilyName = input.ReadString();
                    break;
                  }
                  case 26: {
                    Prefix = input.ReadString();
                    break;
                  }
                  case 34: {
                    Suffix = input.ReadString();
                    break;
                  }
                  case 42: {
                    MiddleName = input.ReadString();
                    break;
                  }
                  case 50: {
                    DisplayName = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class Phone : pb::IMessage<Phone> {
            private static readonly pb::MessageParser<Phone> _parser = new pb::MessageParser<Phone>(() => new Phone());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Phone> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::libsignalservice.push.DataMessage.Types.Contact.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Phone() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Phone(Phone other) : this() {
              _hasBits0 = other._hasBits0;
              value_ = other.value_;
              type_ = other.type_;
              label_ = other.label_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Phone Clone() {
              return new Phone(this);
            }

            /// <summary>Field number for the "value" field.</summary>
            public const int ValueFieldNumber = 1;
            private readonly static string ValueDefaultValue = "";

            private string value_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Value {
              get { return value_ ?? ValueDefaultValue; }
              set {
                value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "value" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasValue {
              get { return value_ != null; }
            }
            /// <summary>Clears the value of the "value" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearValue() {
              value_ = null;
            }

            /// <summary>Field number for the "type" field.</summary>
            public const int TypeFieldNumber = 2;
            private readonly static global::libsignalservice.push.DataMessage.Types.Contact.Types.Phone.Types.Type TypeDefaultValue = global::libsignalservice.push.DataMessage.Types.Contact.Types.Phone.Types.Type.Home;

            private global::libsignalservice.push.DataMessage.Types.Contact.Types.Phone.Types.Type type_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::libsignalservice.push.DataMessage.Types.Contact.Types.Phone.Types.Type Type {
              get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
              set {
                _hasBits0 |= 1;
                type_ = value;
              }
            }
            /// <summary>Gets whether the "type" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasType {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "type" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearType() {
              _hasBits0 &= ~1;
            }

            /// <summary>Field number for the "label" field.</summary>
            public const int LabelFieldNumber = 3;
            private readonly static string LabelDefaultValue = "";

            private string label_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Label {
              get { return label_ ?? LabelDefaultValue; }
              set {
                label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "label" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasLabel {
              get { return label_ != null; }
            }
            /// <summary>Clears the value of the "label" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearLabel() {
              label_ = null;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Phone);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Phone other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Value != other.Value) return false;
              if (Type != other.Type) return false;
              if (Label != other.Label) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasValue) hash ^= Value.GetHashCode();
              if (HasType) hash ^= Type.GetHashCode();
              if (HasLabel) hash ^= Label.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (HasValue) {
                output.WriteRawTag(10);
                output.WriteString(Value);
              }
              if (HasType) {
                output.WriteRawTag(16);
                output.WriteEnum((int) Type);
              }
              if (HasLabel) {
                output.WriteRawTag(26);
                output.WriteString(Label);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasValue) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
              }
              if (HasType) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
              }
              if (HasLabel) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Phone other) {
              if (other == null) {
                return;
              }
              if (other.HasValue) {
                Value = other.Value;
              }
              if (other.HasType) {
                Type = other.Type;
              }
              if (other.HasLabel) {
                Label = other.Label;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Value = input.ReadString();
                    break;
                  }
                  case 16: {
                    Type = (global::libsignalservice.push.DataMessage.Types.Contact.Types.Phone.Types.Type) input.ReadEnum();
                    break;
                  }
                  case 26: {
                    Label = input.ReadString();
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the Phone message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              public enum Type {
                [pbr::OriginalName("HOME")] Home = 1,
                [pbr::OriginalName("MOBILE")] Mobile = 2,
                [pbr::OriginalName("WORK")] Work = 3,
                [pbr::OriginalName("CUSTOM")] Custom = 4,
              }

            }
            #endregion

          }

          public sealed partial class Email : pb::IMessage<Email> {
            private static readonly pb::MessageParser<Email> _parser = new pb::MessageParser<Email>(() => new Email());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Email> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::libsignalservice.push.DataMessage.Types.Contact.Descriptor.NestedTypes[2]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Email() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Email(Email other) : this() {
              _hasBits0 = other._hasBits0;
              value_ = other.value_;
              type_ = other.type_;
              label_ = other.label_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Email Clone() {
              return new Email(this);
            }

            /// <summary>Field number for the "value" field.</summary>
            public const int ValueFieldNumber = 1;
            private readonly static string ValueDefaultValue = "";

            private string value_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Value {
              get { return value_ ?? ValueDefaultValue; }
              set {
                value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "value" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasValue {
              get { return value_ != null; }
            }
            /// <summary>Clears the value of the "value" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearValue() {
              value_ = null;
            }

            /// <summary>Field number for the "type" field.</summary>
            public const int TypeFieldNumber = 2;
            private readonly static global::libsignalservice.push.DataMessage.Types.Contact.Types.Email.Types.Type TypeDefaultValue = global::libsignalservice.push.DataMessage.Types.Contact.Types.Email.Types.Type.Home;

            private global::libsignalservice.push.DataMessage.Types.Contact.Types.Email.Types.Type type_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::libsignalservice.push.DataMessage.Types.Contact.Types.Email.Types.Type Type {
              get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
              set {
                _hasBits0 |= 1;
                type_ = value;
              }
            }
            /// <summary>Gets whether the "type" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasType {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "type" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearType() {
              _hasBits0 &= ~1;
            }

            /// <summary>Field number for the "label" field.</summary>
            public const int LabelFieldNumber = 3;
            private readonly static string LabelDefaultValue = "";

            private string label_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Label {
              get { return label_ ?? LabelDefaultValue; }
              set {
                label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "label" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasLabel {
              get { return label_ != null; }
            }
            /// <summary>Clears the value of the "label" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearLabel() {
              label_ = null;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Email);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Email other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Value != other.Value) return false;
              if (Type != other.Type) return false;
              if (Label != other.Label) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasValue) hash ^= Value.GetHashCode();
              if (HasType) hash ^= Type.GetHashCode();
              if (HasLabel) hash ^= Label.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (HasValue) {
                output.WriteRawTag(10);
                output.WriteString(Value);
              }
              if (HasType) {
                output.WriteRawTag(16);
                output.WriteEnum((int) Type);
              }
              if (HasLabel) {
                output.WriteRawTag(26);
                output.WriteString(Label);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasValue) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
              }
              if (HasType) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
              }
              if (HasLabel) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Email other) {
              if (other == null) {
                return;
              }
              if (other.HasValue) {
                Value = other.Value;
              }
              if (other.HasType) {
                Type = other.Type;
              }
              if (other.HasLabel) {
                Label = other.Label;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Value = input.ReadString();
                    break;
                  }
                  case 16: {
                    Type = (global::libsignalservice.push.DataMessage.Types.Contact.Types.Email.Types.Type) input.ReadEnum();
                    break;
                  }
                  case 26: {
                    Label = input.ReadString();
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the Email message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              public enum Type {
                [pbr::OriginalName("HOME")] Home = 1,
                [pbr::OriginalName("MOBILE")] Mobile = 2,
                [pbr::OriginalName("WORK")] Work = 3,
                [pbr::OriginalName("CUSTOM")] Custom = 4,
              }

            }
            #endregion

          }

          public sealed partial class PostalAddress : pb::IMessage<PostalAddress> {
            private static readonly pb::MessageParser<PostalAddress> _parser = new pb::MessageParser<PostalAddress>(() => new PostalAddress());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<PostalAddress> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::libsignalservice.push.DataMessage.Types.Contact.Descriptor.NestedTypes[3]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PostalAddress() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PostalAddress(PostalAddress other) : this() {
              _hasBits0 = other._hasBits0;
              type_ = other.type_;
              label_ = other.label_;
              street_ = other.street_;
              pobox_ = other.pobox_;
              neighborhood_ = other.neighborhood_;
              city_ = other.city_;
              region_ = other.region_;
              postcode_ = other.postcode_;
              country_ = other.country_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PostalAddress Clone() {
              return new PostalAddress(this);
            }

            /// <summary>Field number for the "type" field.</summary>
            public const int TypeFieldNumber = 1;
            private readonly static global::libsignalservice.push.DataMessage.Types.Contact.Types.PostalAddress.Types.Type TypeDefaultValue = global::libsignalservice.push.DataMessage.Types.Contact.Types.PostalAddress.Types.Type.Home;

            private global::libsignalservice.push.DataMessage.Types.Contact.Types.PostalAddress.Types.Type type_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::libsignalservice.push.DataMessage.Types.Contact.Types.PostalAddress.Types.Type Type {
              get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
              set {
                _hasBits0 |= 1;
                type_ = value;
              }
            }
            /// <summary>Gets whether the "type" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasType {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "type" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearType() {
              _hasBits0 &= ~1;
            }

            /// <summary>Field number for the "label" field.</summary>
            public const int LabelFieldNumber = 2;
            private readonly static string LabelDefaultValue = "";

            private string label_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Label {
              get { return label_ ?? LabelDefaultValue; }
              set {
                label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "label" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasLabel {
              get { return label_ != null; }
            }
            /// <summary>Clears the value of the "label" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearLabel() {
              label_ = null;
            }

            /// <summary>Field number for the "street" field.</summary>
            public const int StreetFieldNumber = 3;
            private readonly static string StreetDefaultValue = "";

            private string street_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Street {
              get { return street_ ?? StreetDefaultValue; }
              set {
                street_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "street" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasStreet {
              get { return street_ != null; }
            }
            /// <summary>Clears the value of the "street" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearStreet() {
              street_ = null;
            }

            /// <summary>Field number for the "pobox" field.</summary>
            public const int PoboxFieldNumber = 4;
            private readonly static string PoboxDefaultValue = "";

            private string pobox_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Pobox {
              get { return pobox_ ?? PoboxDefaultValue; }
              set {
                pobox_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "pobox" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasPobox {
              get { return pobox_ != null; }
            }
            /// <summary>Clears the value of the "pobox" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearPobox() {
              pobox_ = null;
            }

            /// <summary>Field number for the "neighborhood" field.</summary>
            public const int NeighborhoodFieldNumber = 5;
            private readonly static string NeighborhoodDefaultValue = "";

            private string neighborhood_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Neighborhood {
              get { return neighborhood_ ?? NeighborhoodDefaultValue; }
              set {
                neighborhood_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "neighborhood" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasNeighborhood {
              get { return neighborhood_ != null; }
            }
            /// <summary>Clears the value of the "neighborhood" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearNeighborhood() {
              neighborhood_ = null;
            }

            /// <summary>Field number for the "city" field.</summary>
            public const int CityFieldNumber = 6;
            private readonly static string CityDefaultValue = "";

            private string city_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string City {
              get { return city_ ?? CityDefaultValue; }
              set {
                city_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "city" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasCity {
              get { return city_ != null; }
            }
            /// <summary>Clears the value of the "city" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearCity() {
              city_ = null;
            }

            /// <summary>Field number for the "region" field.</summary>
            public const int RegionFieldNumber = 7;
            private readonly static string RegionDefaultValue = "";

            private string region_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Region {
              get { return region_ ?? RegionDefaultValue; }
              set {
                region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "region" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasRegion {
              get { return region_ != null; }
            }
            /// <summary>Clears the value of the "region" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearRegion() {
              region_ = null;
            }

            /// <summary>Field number for the "postcode" field.</summary>
            public const int PostcodeFieldNumber = 8;
            private readonly static string PostcodeDefaultValue = "";

            private string postcode_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Postcode {
              get { return postcode_ ?? PostcodeDefaultValue; }
              set {
                postcode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "postcode" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasPostcode {
              get { return postcode_ != null; }
            }
            /// <summary>Clears the value of the "postcode" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearPostcode() {
              postcode_ = null;
            }

            /// <summary>Field number for the "country" field.</summary>
            public const int CountryFieldNumber = 9;
            private readonly static string CountryDefaultValue = "";

            private string country_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Country {
              get { return country_ ?? CountryDefaultValue; }
              set {
                country_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "country" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasCountry {
              get { return country_ != null; }
            }
            /// <summary>Clears the value of the "country" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearCountry() {
              country_ = null;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as PostalAddress);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(PostalAddress other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Type != other.Type) return false;
              if (Label != other.Label) return false;
              if (Street != other.Street) return false;
              if (Pobox != other.Pobox) return false;
              if (Neighborhood != other.Neighborhood) return false;
              if (City != other.City) return false;
              if (Region != other.Region) return false;
              if (Postcode != other.Postcode) return false;
              if (Country != other.Country) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasType) hash ^= Type.GetHashCode();
              if (HasLabel) hash ^= Label.GetHashCode();
              if (HasStreet) hash ^= Street.GetHashCode();
              if (HasPobox) hash ^= Pobox.GetHashCode();
              if (HasNeighborhood) hash ^= Neighborhood.GetHashCode();
              if (HasCity) hash ^= City.GetHashCode();
              if (HasRegion) hash ^= Region.GetHashCode();
              if (HasPostcode) hash ^= Postcode.GetHashCode();
              if (HasCountry) hash ^= Country.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (HasType) {
                output.WriteRawTag(8);
                output.WriteEnum((int) Type);
              }
              if (HasLabel) {
                output.WriteRawTag(18);
                output.WriteString(Label);
              }
              if (HasStreet) {
                output.WriteRawTag(26);
                output.WriteString(Street);
              }
              if (HasPobox) {
                output.WriteRawTag(34);
                output.WriteString(Pobox);
              }
              if (HasNeighborhood) {
                output.WriteRawTag(42);
                output.WriteString(Neighborhood);
              }
              if (HasCity) {
                output.WriteRawTag(50);
                output.WriteString(City);
              }
              if (HasRegion) {
                output.WriteRawTag(58);
                output.WriteString(Region);
              }
              if (HasPostcode) {
                output.WriteRawTag(66);
                output.WriteString(Postcode);
              }
              if (HasCountry) {
                output.WriteRawTag(74);
                output.WriteString(Country);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasType) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
              }
              if (HasLabel) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
              }
              if (HasStreet) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Street);
              }
              if (HasPobox) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Pobox);
              }
              if (HasNeighborhood) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Neighborhood);
              }
              if (HasCity) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(City);
              }
              if (HasRegion) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
              }
              if (HasPostcode) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Postcode);
              }
              if (HasCountry) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(PostalAddress other) {
              if (other == null) {
                return;
              }
              if (other.HasType) {
                Type = other.Type;
              }
              if (other.HasLabel) {
                Label = other.Label;
              }
              if (other.HasStreet) {
                Street = other.Street;
              }
              if (other.HasPobox) {
                Pobox = other.Pobox;
              }
              if (other.HasNeighborhood) {
                Neighborhood = other.Neighborhood;
              }
              if (other.HasCity) {
                City = other.City;
              }
              if (other.HasRegion) {
                Region = other.Region;
              }
              if (other.HasPostcode) {
                Postcode = other.Postcode;
              }
              if (other.HasCountry) {
                Country = other.Country;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    Type = (global::libsignalservice.push.DataMessage.Types.Contact.Types.PostalAddress.Types.Type) input.ReadEnum();
                    break;
                  }
                  case 18: {
                    Label = input.ReadString();
                    break;
                  }
                  case 26: {
                    Street = input.ReadString();
                    break;
                  }
                  case 34: {
                    Pobox = input.ReadString();
                    break;
                  }
                  case 42: {
                    Neighborhood = input.ReadString();
                    break;
                  }
                  case 50: {
                    City = input.ReadString();
                    break;
                  }
                  case 58: {
                    Region = input.ReadString();
                    break;
                  }
                  case 66: {
                    Postcode = input.ReadString();
                    break;
                  }
                  case 74: {
                    Country = input.ReadString();
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the PostalAddress message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              public enum Type {
                [pbr::OriginalName("HOME")] Home = 1,
                [pbr::OriginalName("WORK")] Work = 2,
                [pbr::OriginalName("CUSTOM")] Custom = 3,
              }

            }
            #endregion

          }

          public sealed partial class Avatar : pb::IMessage<Avatar> {
            private static readonly pb::MessageParser<Avatar> _parser = new pb::MessageParser<Avatar>(() => new Avatar());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Avatar> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::libsignalservice.push.DataMessage.Types.Contact.Descriptor.NestedTypes[4]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Avatar() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Avatar(Avatar other) : this() {
              _hasBits0 = other._hasBits0;
              avatar_ = other.avatar_ != null ? other.avatar_.Clone() : null;
              isProfile_ = other.isProfile_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Avatar Clone() {
              return new Avatar(this);
            }

            /// <summary>Field number for the "avatar" field.</summary>
            public const int Avatar_FieldNumber = 1;
            private global::libsignalservice.push.AttachmentPointer avatar_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::libsignalservice.push.AttachmentPointer Avatar_ {
              get { return avatar_; }
              set {
                avatar_ = value;
              }
            }

            /// <summary>Field number for the "isProfile" field.</summary>
            public const int IsProfileFieldNumber = 2;
            private readonly static bool IsProfileDefaultValue = false;

            private bool isProfile_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool IsProfile {
              get { if ((_hasBits0 & 1) != 0) { return isProfile_; } else { return IsProfileDefaultValue; } }
              set {
                _hasBits0 |= 1;
                isProfile_ = value;
              }
            }
            /// <summary>Gets whether the "isProfile" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasIsProfile {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "isProfile" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearIsProfile() {
              _hasBits0 &= ~1;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Avatar);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Avatar other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(Avatar_, other.Avatar_)) return false;
              if (IsProfile != other.IsProfile) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (avatar_ != null) hash ^= Avatar_.GetHashCode();
              if (HasIsProfile) hash ^= IsProfile.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (avatar_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(Avatar_);
              }
              if (HasIsProfile) {
                output.WriteRawTag(16);
                output.WriteBool(IsProfile);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (avatar_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Avatar_);
              }
              if (HasIsProfile) {
                size += 1 + 1;
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Avatar other) {
              if (other == null) {
                return;
              }
              if (other.avatar_ != null) {
                if (avatar_ == null) {
                  Avatar_ = new global::libsignalservice.push.AttachmentPointer();
                }
                Avatar_.MergeFrom(other.Avatar_);
              }
              if (other.HasIsProfile) {
                IsProfile = other.IsProfile;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    if (avatar_ == null) {
                      Avatar_ = new global::libsignalservice.push.AttachmentPointer();
                    }
                    input.ReadMessage(Avatar_);
                    break;
                  }
                  case 16: {
                    IsProfile = input.ReadBool();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class Preview : pb::IMessage<Preview> {
        private static readonly pb::MessageParser<Preview> _parser = new pb::MessageParser<Preview>(() => new Preview());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Preview> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.DataMessage.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Preview() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Preview(Preview other) : this() {
          url_ = other.url_;
          title_ = other.title_;
          image_ = other.image_ != null ? other.image_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Preview Clone() {
          return new Preview(this);
        }

        /// <summary>Field number for the "url" field.</summary>
        public const int UrlFieldNumber = 1;
        private readonly static string UrlDefaultValue = "";

        private string url_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Url {
          get { return url_ ?? UrlDefaultValue; }
          set {
            url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "url" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUrl {
          get { return url_ != null; }
        }
        /// <summary>Clears the value of the "url" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUrl() {
          url_ = null;
        }

        /// <summary>Field number for the "title" field.</summary>
        public const int TitleFieldNumber = 2;
        private readonly static string TitleDefaultValue = "";

        private string title_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Title {
          get { return title_ ?? TitleDefaultValue; }
          set {
            title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "title" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTitle {
          get { return title_ != null; }
        }
        /// <summary>Clears the value of the "title" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTitle() {
          title_ = null;
        }

        /// <summary>Field number for the "image" field.</summary>
        public const int ImageFieldNumber = 3;
        private global::libsignalservice.push.AttachmentPointer image_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::libsignalservice.push.AttachmentPointer Image {
          get { return image_; }
          set {
            image_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Preview);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Preview other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Url != other.Url) return false;
          if (Title != other.Title) return false;
          if (!object.Equals(Image, other.Image)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasUrl) hash ^= Url.GetHashCode();
          if (HasTitle) hash ^= Title.GetHashCode();
          if (image_ != null) hash ^= Image.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasUrl) {
            output.WriteRawTag(10);
            output.WriteString(Url);
          }
          if (HasTitle) {
            output.WriteRawTag(18);
            output.WriteString(Title);
          }
          if (image_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Image);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasUrl) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
          }
          if (HasTitle) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
          }
          if (image_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Preview other) {
          if (other == null) {
            return;
          }
          if (other.HasUrl) {
            Url = other.Url;
          }
          if (other.HasTitle) {
            Title = other.Title;
          }
          if (other.image_ != null) {
            if (image_ == null) {
              Image = new global::libsignalservice.push.AttachmentPointer();
            }
            Image.MergeFrom(other.Image);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Url = input.ReadString();
                break;
              }
              case 18: {
                Title = input.ReadString();
                break;
              }
              case 26: {
                if (image_ == null) {
                  Image = new global::libsignalservice.push.AttachmentPointer();
                }
                input.ReadMessage(Image);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Sticker : pb::IMessage<Sticker> {
        private static readonly pb::MessageParser<Sticker> _parser = new pb::MessageParser<Sticker>(() => new Sticker());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Sticker> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.DataMessage.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Sticker() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Sticker(Sticker other) : this() {
          _hasBits0 = other._hasBits0;
          packId_ = other.packId_;
          packKey_ = other.packKey_;
          stickerId_ = other.stickerId_;
          data_ = other.data_ != null ? other.data_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Sticker Clone() {
          return new Sticker(this);
        }

        /// <summary>Field number for the "packId" field.</summary>
        public const int PackIdFieldNumber = 1;
        private readonly static pb::ByteString PackIdDefaultValue = pb::ByteString.Empty;

        private pb::ByteString packId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString PackId {
          get { return packId_ ?? PackIdDefaultValue; }
          set {
            packId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "packId" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPackId {
          get { return packId_ != null; }
        }
        /// <summary>Clears the value of the "packId" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPackId() {
          packId_ = null;
        }

        /// <summary>Field number for the "packKey" field.</summary>
        public const int PackKeyFieldNumber = 2;
        private readonly static pb::ByteString PackKeyDefaultValue = pb::ByteString.Empty;

        private pb::ByteString packKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString PackKey {
          get { return packKey_ ?? PackKeyDefaultValue; }
          set {
            packKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "packKey" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPackKey {
          get { return packKey_ != null; }
        }
        /// <summary>Clears the value of the "packKey" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPackKey() {
          packKey_ = null;
        }

        /// <summary>Field number for the "stickerId" field.</summary>
        public const int StickerIdFieldNumber = 3;
        private readonly static uint StickerIdDefaultValue = 0;

        private uint stickerId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint StickerId {
          get { if ((_hasBits0 & 1) != 0) { return stickerId_; } else { return StickerIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            stickerId_ = value;
          }
        }
        /// <summary>Gets whether the "stickerId" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasStickerId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "stickerId" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearStickerId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 4;
        private global::libsignalservice.push.AttachmentPointer data_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::libsignalservice.push.AttachmentPointer Data {
          get { return data_; }
          set {
            data_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Sticker);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Sticker other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PackId != other.PackId) return false;
          if (PackKey != other.PackKey) return false;
          if (StickerId != other.StickerId) return false;
          if (!object.Equals(Data, other.Data)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasPackId) hash ^= PackId.GetHashCode();
          if (HasPackKey) hash ^= PackKey.GetHashCode();
          if (HasStickerId) hash ^= StickerId.GetHashCode();
          if (data_ != null) hash ^= Data.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasPackId) {
            output.WriteRawTag(10);
            output.WriteBytes(PackId);
          }
          if (HasPackKey) {
            output.WriteRawTag(18);
            output.WriteBytes(PackKey);
          }
          if (HasStickerId) {
            output.WriteRawTag(24);
            output.WriteUInt32(StickerId);
          }
          if (data_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Data);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasPackId) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(PackId);
          }
          if (HasPackKey) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(PackKey);
          }
          if (HasStickerId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StickerId);
          }
          if (data_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Sticker other) {
          if (other == null) {
            return;
          }
          if (other.HasPackId) {
            PackId = other.PackId;
          }
          if (other.HasPackKey) {
            PackKey = other.PackKey;
          }
          if (other.HasStickerId) {
            StickerId = other.StickerId;
          }
          if (other.data_ != null) {
            if (data_ == null) {
              Data = new global::libsignalservice.push.AttachmentPointer();
            }
            Data.MergeFrom(other.Data);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                PackId = input.ReadBytes();
                break;
              }
              case 18: {
                PackKey = input.ReadBytes();
                break;
              }
              case 24: {
                StickerId = input.ReadUInt32();
                break;
              }
              case 34: {
                if (data_ == null) {
                  Data = new global::libsignalservice.push.AttachmentPointer();
                }
                input.ReadMessage(Data);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class NullMessage : pb::IMessage<NullMessage> {
    private static readonly pb::MessageParser<NullMessage> _parser = new pb::MessageParser<NullMessage>(() => new NullMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NullMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::libsignalservice.push.SignalServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NullMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NullMessage(NullMessage other) : this() {
      padding_ = other.padding_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NullMessage Clone() {
      return new NullMessage(this);
    }

    /// <summary>Field number for the "padding" field.</summary>
    public const int PaddingFieldNumber = 1;
    private readonly static pb::ByteString PaddingDefaultValue = pb::ByteString.Empty;

    private pb::ByteString padding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Padding {
      get { return padding_ ?? PaddingDefaultValue; }
      set {
        padding_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "padding" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPadding {
      get { return padding_ != null; }
    }
    /// <summary>Clears the value of the "padding" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPadding() {
      padding_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NullMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NullMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Padding != other.Padding) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPadding) hash ^= Padding.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasPadding) {
        output.WriteRawTag(10);
        output.WriteBytes(Padding);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPadding) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Padding);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NullMessage other) {
      if (other == null) {
        return;
      }
      if (other.HasPadding) {
        Padding = other.Padding;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Padding = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReceiptMessage : pb::IMessage<ReceiptMessage> {
    private static readonly pb::MessageParser<ReceiptMessage> _parser = new pb::MessageParser<ReceiptMessage>(() => new ReceiptMessage());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReceiptMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::libsignalservice.push.SignalServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiptMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiptMessage(ReceiptMessage other) : this() {
      _hasBits0 = other._hasBits0;
      type_ = other.type_;
      timestamp_ = other.timestamp_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiptMessage Clone() {
      return new ReceiptMessage(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static global::libsignalservice.push.ReceiptMessage.Types.Type TypeDefaultValue = global::libsignalservice.push.ReceiptMessage.Types.Type.Delivery;

    private global::libsignalservice.push.ReceiptMessage.Types.Type type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.ReceiptMessage.Types.Type Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_timestamp_codec
        = pb::FieldCodec.ForUInt64(16);
    private readonly pbc::RepeatedField<ulong> timestamp_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Timestamp {
      get { return timestamp_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReceiptMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReceiptMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if(!timestamp_.Equals(other.timestamp_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      hash ^= timestamp_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      timestamp_.WriteTo(output, _repeated_timestamp_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += timestamp_.CalculateSize(_repeated_timestamp_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReceiptMessage other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      timestamp_.Add(other.timestamp_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::libsignalservice.push.ReceiptMessage.Types.Type) input.ReadEnum();
            break;
          }
          case 18:
          case 16: {
            timestamp_.AddEntriesFrom(input, _repeated_timestamp_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReceiptMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("DELIVERY")] Delivery = 0,
        [pbr::OriginalName("READ")] Read = 1,
      }

    }
    #endregion

  }

  public sealed partial class TypingMessage : pb::IMessage<TypingMessage> {
    private static readonly pb::MessageParser<TypingMessage> _parser = new pb::MessageParser<TypingMessage>(() => new TypingMessage());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TypingMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::libsignalservice.push.SignalServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypingMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypingMessage(TypingMessage other) : this() {
      _hasBits0 = other._hasBits0;
      timestamp_ = other.timestamp_;
      action_ = other.action_;
      groupId_ = other.groupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypingMessage Clone() {
      return new TypingMessage(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private readonly static ulong TimestampDefaultValue = 0UL;

    private ulong timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { if ((_hasBits0 & 1) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 1;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimestamp {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestamp() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 2;
    private readonly static global::libsignalservice.push.TypingMessage.Types.Action ActionDefaultValue = global::libsignalservice.push.TypingMessage.Types.Action.Started;

    private global::libsignalservice.push.TypingMessage.Types.Action action_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.TypingMessage.Types.Action Action {
      get { if ((_hasBits0 & 2) != 0) { return action_; } else { return ActionDefaultValue; } }
      set {
        _hasBits0 |= 2;
        action_ = value;
      }
    }
    /// <summary>Gets whether the "action" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAction {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "action" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAction() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 3;
    private readonly static pb::ByteString GroupIdDefaultValue = pb::ByteString.Empty;

    private pb::ByteString groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GroupId {
      get { return groupId_ ?? GroupIdDefaultValue; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "groupId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupId {
      get { return groupId_ != null; }
    }
    /// <summary>Clears the value of the "groupId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupId() {
      groupId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TypingMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TypingMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (Action != other.Action) return false;
      if (GroupId != other.GroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTimestamp) hash ^= Timestamp.GetHashCode();
      if (HasAction) hash ^= Action.GetHashCode();
      if (HasGroupId) hash ^= GroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTimestamp) {
        output.WriteRawTag(8);
        output.WriteUInt64(Timestamp);
      }
      if (HasAction) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Action);
      }
      if (HasGroupId) {
        output.WriteRawTag(26);
        output.WriteBytes(GroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (HasAction) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
      }
      if (HasGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TypingMessage other) {
      if (other == null) {
        return;
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      if (other.HasAction) {
        Action = other.Action;
      }
      if (other.HasGroupId) {
        GroupId = other.GroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 16: {
            Action = (global::libsignalservice.push.TypingMessage.Types.Action) input.ReadEnum();
            break;
          }
          case 26: {
            GroupId = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TypingMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Action {
        [pbr::OriginalName("STARTED")] Started = 0,
        [pbr::OriginalName("STOPPED")] Stopped = 1,
      }

    }
    #endregion

  }

  public sealed partial class Verified : pb::IMessage<Verified> {
    private static readonly pb::MessageParser<Verified> _parser = new pb::MessageParser<Verified>(() => new Verified());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Verified> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::libsignalservice.push.SignalServiceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Verified() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Verified(Verified other) : this() {
      _hasBits0 = other._hasBits0;
      destination_ = other.destination_;
      identityKey_ = other.identityKey_;
      state_ = other.state_;
      nullMessage_ = other.nullMessage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Verified Clone() {
      return new Verified(this);
    }

    /// <summary>Field number for the "destination" field.</summary>
    public const int DestinationFieldNumber = 1;
    private readonly static string DestinationDefaultValue = "";

    private string destination_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Destination {
      get { return destination_ ?? DestinationDefaultValue; }
      set {
        destination_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "destination" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDestination {
      get { return destination_ != null; }
    }
    /// <summary>Clears the value of the "destination" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDestination() {
      destination_ = null;
    }

    /// <summary>Field number for the "identityKey" field.</summary>
    public const int IdentityKeyFieldNumber = 2;
    private readonly static pb::ByteString IdentityKeyDefaultValue = pb::ByteString.Empty;

    private pb::ByteString identityKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IdentityKey {
      get { return identityKey_ ?? IdentityKeyDefaultValue; }
      set {
        identityKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "identityKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIdentityKey {
      get { return identityKey_ != null; }
    }
    /// <summary>Clears the value of the "identityKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIdentityKey() {
      identityKey_ = null;
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private readonly static global::libsignalservice.push.Verified.Types.State StateDefaultValue = global::libsignalservice.push.Verified.Types.State.Default;

    private global::libsignalservice.push.Verified.Types.State state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.Verified.Types.State State {
      get { if ((_hasBits0 & 1) != 0) { return state_; } else { return StateDefaultValue; } }
      set {
        _hasBits0 |= 1;
        state_ = value;
      }
    }
    /// <summary>Gets whether the "state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasState {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearState() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "nullMessage" field.</summary>
    public const int NullMessageFieldNumber = 4;
    private readonly static pb::ByteString NullMessageDefaultValue = pb::ByteString.Empty;

    private pb::ByteString nullMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NullMessage {
      get { return nullMessage_ ?? NullMessageDefaultValue; }
      set {
        nullMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "nullMessage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNullMessage {
      get { return nullMessage_ != null; }
    }
    /// <summary>Clears the value of the "nullMessage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNullMessage() {
      nullMessage_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Verified);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Verified other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Destination != other.Destination) return false;
      if (IdentityKey != other.IdentityKey) return false;
      if (State != other.State) return false;
      if (NullMessage != other.NullMessage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDestination) hash ^= Destination.GetHashCode();
      if (HasIdentityKey) hash ^= IdentityKey.GetHashCode();
      if (HasState) hash ^= State.GetHashCode();
      if (HasNullMessage) hash ^= NullMessage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasDestination) {
        output.WriteRawTag(10);
        output.WriteString(Destination);
      }
      if (HasIdentityKey) {
        output.WriteRawTag(18);
        output.WriteBytes(IdentityKey);
      }
      if (HasState) {
        output.WriteRawTag(24);
        output.WriteEnum((int) State);
      }
      if (HasNullMessage) {
        output.WriteRawTag(34);
        output.WriteBytes(NullMessage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasDestination) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Destination);
      }
      if (HasIdentityKey) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IdentityKey);
      }
      if (HasState) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (HasNullMessage) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NullMessage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Verified other) {
      if (other == null) {
        return;
      }
      if (other.HasDestination) {
        Destination = other.Destination;
      }
      if (other.HasIdentityKey) {
        IdentityKey = other.IdentityKey;
      }
      if (other.HasState) {
        State = other.State;
      }
      if (other.HasNullMessage) {
        NullMessage = other.NullMessage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Destination = input.ReadString();
            break;
          }
          case 18: {
            IdentityKey = input.ReadBytes();
            break;
          }
          case 24: {
            State = (global::libsignalservice.push.Verified.Types.State) input.ReadEnum();
            break;
          }
          case 34: {
            NullMessage = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Verified message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum State {
        [pbr::OriginalName("DEFAULT")] Default = 0,
        [pbr::OriginalName("VERIFIED")] Verified = 1,
        [pbr::OriginalName("UNVERIFIED")] Unverified = 2,
      }

    }
    #endregion

  }

  public sealed partial class SyncMessage : pb::IMessage<SyncMessage> {
    private static readonly pb::MessageParser<SyncMessage> _parser = new pb::MessageParser<SyncMessage>(() => new SyncMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SyncMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::libsignalservice.push.SignalServiceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncMessage(SyncMessage other) : this() {
      sent_ = other.sent_ != null ? other.sent_.Clone() : null;
      contacts_ = other.contacts_ != null ? other.contacts_.Clone() : null;
      groups_ = other.groups_ != null ? other.groups_.Clone() : null;
      request_ = other.request_ != null ? other.request_.Clone() : null;
      read_ = other.read_.Clone();
      blocked_ = other.blocked_ != null ? other.blocked_.Clone() : null;
      verified_ = other.verified_ != null ? other.verified_.Clone() : null;
      configuration_ = other.configuration_ != null ? other.configuration_.Clone() : null;
      padding_ = other.padding_;
      stickerPackOperation_ = other.stickerPackOperation_.Clone();
      messageTimerRead_ = other.messageTimerRead_ != null ? other.messageTimerRead_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncMessage Clone() {
      return new SyncMessage(this);
    }

    /// <summary>Field number for the "sent" field.</summary>
    public const int SentFieldNumber = 1;
    private global::libsignalservice.push.SyncMessage.Types.Sent sent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.SyncMessage.Types.Sent Sent {
      get { return sent_; }
      set {
        sent_ = value;
      }
    }

    /// <summary>Field number for the "contacts" field.</summary>
    public const int ContactsFieldNumber = 2;
    private global::libsignalservice.push.SyncMessage.Types.Contacts contacts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.SyncMessage.Types.Contacts Contacts {
      get { return contacts_; }
      set {
        contacts_ = value;
      }
    }

    /// <summary>Field number for the "groups" field.</summary>
    public const int GroupsFieldNumber = 3;
    private global::libsignalservice.push.SyncMessage.Types.Groups groups_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.SyncMessage.Types.Groups Groups {
      get { return groups_; }
      set {
        groups_ = value;
      }
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 4;
    private global::libsignalservice.push.SyncMessage.Types.Request request_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.SyncMessage.Types.Request Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    /// <summary>Field number for the "read" field.</summary>
    public const int ReadFieldNumber = 5;
    private static readonly pb::FieldCodec<global::libsignalservice.push.SyncMessage.Types.Read> _repeated_read_codec
        = pb::FieldCodec.ForMessage(42, global::libsignalservice.push.SyncMessage.Types.Read.Parser);
    private readonly pbc::RepeatedField<global::libsignalservice.push.SyncMessage.Types.Read> read_ = new pbc::RepeatedField<global::libsignalservice.push.SyncMessage.Types.Read>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::libsignalservice.push.SyncMessage.Types.Read> Read {
      get { return read_; }
    }

    /// <summary>Field number for the "blocked" field.</summary>
    public const int BlockedFieldNumber = 6;
    private global::libsignalservice.push.SyncMessage.Types.Blocked blocked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.SyncMessage.Types.Blocked Blocked {
      get { return blocked_; }
      set {
        blocked_ = value;
      }
    }

    /// <summary>Field number for the "verified" field.</summary>
    public const int VerifiedFieldNumber = 7;
    private global::libsignalservice.push.Verified verified_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.Verified Verified {
      get { return verified_; }
      set {
        verified_ = value;
      }
    }

    /// <summary>Field number for the "configuration" field.</summary>
    public const int ConfigurationFieldNumber = 9;
    private global::libsignalservice.push.SyncMessage.Types.Configuration configuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.SyncMessage.Types.Configuration Configuration {
      get { return configuration_; }
      set {
        configuration_ = value;
      }
    }

    /// <summary>Field number for the "padding" field.</summary>
    public const int PaddingFieldNumber = 8;
    private readonly static pb::ByteString PaddingDefaultValue = pb::ByteString.Empty;

    private pb::ByteString padding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Padding {
      get { return padding_ ?? PaddingDefaultValue; }
      set {
        padding_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "padding" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPadding {
      get { return padding_ != null; }
    }
    /// <summary>Clears the value of the "padding" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPadding() {
      padding_ = null;
    }

    /// <summary>Field number for the "stickerPackOperation" field.</summary>
    public const int StickerPackOperationFieldNumber = 10;
    private static readonly pb::FieldCodec<global::libsignalservice.push.SyncMessage.Types.StickerPackOperation> _repeated_stickerPackOperation_codec
        = pb::FieldCodec.ForMessage(82, global::libsignalservice.push.SyncMessage.Types.StickerPackOperation.Parser);
    private readonly pbc::RepeatedField<global::libsignalservice.push.SyncMessage.Types.StickerPackOperation> stickerPackOperation_ = new pbc::RepeatedField<global::libsignalservice.push.SyncMessage.Types.StickerPackOperation>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::libsignalservice.push.SyncMessage.Types.StickerPackOperation> StickerPackOperation {
      get { return stickerPackOperation_; }
    }

    /// <summary>Field number for the "messageTimerRead" field.</summary>
    public const int MessageTimerReadFieldNumber = 11;
    private global::libsignalservice.push.SyncMessage.Types.MessageTimerRead messageTimerRead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.SyncMessage.Types.MessageTimerRead MessageTimerRead {
      get { return messageTimerRead_; }
      set {
        messageTimerRead_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SyncMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SyncMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Sent, other.Sent)) return false;
      if (!object.Equals(Contacts, other.Contacts)) return false;
      if (!object.Equals(Groups, other.Groups)) return false;
      if (!object.Equals(Request, other.Request)) return false;
      if(!read_.Equals(other.read_)) return false;
      if (!object.Equals(Blocked, other.Blocked)) return false;
      if (!object.Equals(Verified, other.Verified)) return false;
      if (!object.Equals(Configuration, other.Configuration)) return false;
      if (Padding != other.Padding) return false;
      if(!stickerPackOperation_.Equals(other.stickerPackOperation_)) return false;
      if (!object.Equals(MessageTimerRead, other.MessageTimerRead)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sent_ != null) hash ^= Sent.GetHashCode();
      if (contacts_ != null) hash ^= Contacts.GetHashCode();
      if (groups_ != null) hash ^= Groups.GetHashCode();
      if (request_ != null) hash ^= Request.GetHashCode();
      hash ^= read_.GetHashCode();
      if (blocked_ != null) hash ^= Blocked.GetHashCode();
      if (verified_ != null) hash ^= Verified.GetHashCode();
      if (configuration_ != null) hash ^= Configuration.GetHashCode();
      if (HasPadding) hash ^= Padding.GetHashCode();
      hash ^= stickerPackOperation_.GetHashCode();
      if (messageTimerRead_ != null) hash ^= MessageTimerRead.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sent_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Sent);
      }
      if (contacts_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Contacts);
      }
      if (groups_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Groups);
      }
      if (request_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Request);
      }
      read_.WriteTo(output, _repeated_read_codec);
      if (blocked_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Blocked);
      }
      if (verified_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Verified);
      }
      if (HasPadding) {
        output.WriteRawTag(66);
        output.WriteBytes(Padding);
      }
      if (configuration_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Configuration);
      }
      stickerPackOperation_.WriteTo(output, _repeated_stickerPackOperation_codec);
      if (messageTimerRead_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(MessageTimerRead);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sent);
      }
      if (contacts_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Contacts);
      }
      if (groups_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Groups);
      }
      if (request_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      size += read_.CalculateSize(_repeated_read_codec);
      if (blocked_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Blocked);
      }
      if (verified_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Verified);
      }
      if (configuration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Configuration);
      }
      if (HasPadding) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Padding);
      }
      size += stickerPackOperation_.CalculateSize(_repeated_stickerPackOperation_codec);
      if (messageTimerRead_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MessageTimerRead);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SyncMessage other) {
      if (other == null) {
        return;
      }
      if (other.sent_ != null) {
        if (sent_ == null) {
          Sent = new global::libsignalservice.push.SyncMessage.Types.Sent();
        }
        Sent.MergeFrom(other.Sent);
      }
      if (other.contacts_ != null) {
        if (contacts_ == null) {
          Contacts = new global::libsignalservice.push.SyncMessage.Types.Contacts();
        }
        Contacts.MergeFrom(other.Contacts);
      }
      if (other.groups_ != null) {
        if (groups_ == null) {
          Groups = new global::libsignalservice.push.SyncMessage.Types.Groups();
        }
        Groups.MergeFrom(other.Groups);
      }
      if (other.request_ != null) {
        if (request_ == null) {
          Request = new global::libsignalservice.push.SyncMessage.Types.Request();
        }
        Request.MergeFrom(other.Request);
      }
      read_.Add(other.read_);
      if (other.blocked_ != null) {
        if (blocked_ == null) {
          Blocked = new global::libsignalservice.push.SyncMessage.Types.Blocked();
        }
        Blocked.MergeFrom(other.Blocked);
      }
      if (other.verified_ != null) {
        if (verified_ == null) {
          Verified = new global::libsignalservice.push.Verified();
        }
        Verified.MergeFrom(other.Verified);
      }
      if (other.configuration_ != null) {
        if (configuration_ == null) {
          Configuration = new global::libsignalservice.push.SyncMessage.Types.Configuration();
        }
        Configuration.MergeFrom(other.Configuration);
      }
      if (other.HasPadding) {
        Padding = other.Padding;
      }
      stickerPackOperation_.Add(other.stickerPackOperation_);
      if (other.messageTimerRead_ != null) {
        if (messageTimerRead_ == null) {
          MessageTimerRead = new global::libsignalservice.push.SyncMessage.Types.MessageTimerRead();
        }
        MessageTimerRead.MergeFrom(other.MessageTimerRead);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (sent_ == null) {
              Sent = new global::libsignalservice.push.SyncMessage.Types.Sent();
            }
            input.ReadMessage(Sent);
            break;
          }
          case 18: {
            if (contacts_ == null) {
              Contacts = new global::libsignalservice.push.SyncMessage.Types.Contacts();
            }
            input.ReadMessage(Contacts);
            break;
          }
          case 26: {
            if (groups_ == null) {
              Groups = new global::libsignalservice.push.SyncMessage.Types.Groups();
            }
            input.ReadMessage(Groups);
            break;
          }
          case 34: {
            if (request_ == null) {
              Request = new global::libsignalservice.push.SyncMessage.Types.Request();
            }
            input.ReadMessage(Request);
            break;
          }
          case 42: {
            read_.AddEntriesFrom(input, _repeated_read_codec);
            break;
          }
          case 50: {
            if (blocked_ == null) {
              Blocked = new global::libsignalservice.push.SyncMessage.Types.Blocked();
            }
            input.ReadMessage(Blocked);
            break;
          }
          case 58: {
            if (verified_ == null) {
              Verified = new global::libsignalservice.push.Verified();
            }
            input.ReadMessage(Verified);
            break;
          }
          case 66: {
            Padding = input.ReadBytes();
            break;
          }
          case 74: {
            if (configuration_ == null) {
              Configuration = new global::libsignalservice.push.SyncMessage.Types.Configuration();
            }
            input.ReadMessage(Configuration);
            break;
          }
          case 82: {
            stickerPackOperation_.AddEntriesFrom(input, _repeated_stickerPackOperation_codec);
            break;
          }
          case 90: {
            if (messageTimerRead_ == null) {
              MessageTimerRead = new global::libsignalservice.push.SyncMessage.Types.MessageTimerRead();
            }
            input.ReadMessage(MessageTimerRead);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SyncMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Sent : pb::IMessage<Sent> {
        private static readonly pb::MessageParser<Sent> _parser = new pb::MessageParser<Sent>(() => new Sent());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Sent> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.SyncMessage.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Sent() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Sent(Sent other) : this() {
          _hasBits0 = other._hasBits0;
          destination_ = other.destination_;
          timestamp_ = other.timestamp_;
          message_ = other.message_ != null ? other.message_.Clone() : null;
          expirationStartTimestamp_ = other.expirationStartTimestamp_;
          unidentifiedStatus_ = other.unidentifiedStatus_.Clone();
          isRecipientUpdate_ = other.isRecipientUpdate_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Sent Clone() {
          return new Sent(this);
        }

        /// <summary>Field number for the "destination" field.</summary>
        public const int DestinationFieldNumber = 1;
        private readonly static string DestinationDefaultValue = "";

        private string destination_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Destination {
          get { return destination_ ?? DestinationDefaultValue; }
          set {
            destination_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "destination" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDestination {
          get { return destination_ != null; }
        }
        /// <summary>Clears the value of the "destination" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDestination() {
          destination_ = null;
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 2;
        private readonly static ulong TimestampDefaultValue = 0UL;

        private ulong timestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Timestamp {
          get { if ((_hasBits0 & 1) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
          set {
            _hasBits0 |= 1;
            timestamp_ = value;
          }
        }
        /// <summary>Gets whether the "timestamp" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTimestamp {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "timestamp" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTimestamp() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "message" field.</summary>
        public const int MessageFieldNumber = 3;
        private global::libsignalservice.push.DataMessage message_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::libsignalservice.push.DataMessage Message {
          get { return message_; }
          set {
            message_ = value;
          }
        }

        /// <summary>Field number for the "expirationStartTimestamp" field.</summary>
        public const int ExpirationStartTimestampFieldNumber = 4;
        private readonly static ulong ExpirationStartTimestampDefaultValue = 0UL;

        private ulong expirationStartTimestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong ExpirationStartTimestamp {
          get { if ((_hasBits0 & 2) != 0) { return expirationStartTimestamp_; } else { return ExpirationStartTimestampDefaultValue; } }
          set {
            _hasBits0 |= 2;
            expirationStartTimestamp_ = value;
          }
        }
        /// <summary>Gets whether the "expirationStartTimestamp" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasExpirationStartTimestamp {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "expirationStartTimestamp" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearExpirationStartTimestamp() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "unidentifiedStatus" field.</summary>
        public const int UnidentifiedStatusFieldNumber = 5;
        private static readonly pb::FieldCodec<global::libsignalservice.push.SyncMessage.Types.Sent.Types.UnidentifiedDeliveryStatus> _repeated_unidentifiedStatus_codec
            = pb::FieldCodec.ForMessage(42, global::libsignalservice.push.SyncMessage.Types.Sent.Types.UnidentifiedDeliveryStatus.Parser);
        private readonly pbc::RepeatedField<global::libsignalservice.push.SyncMessage.Types.Sent.Types.UnidentifiedDeliveryStatus> unidentifiedStatus_ = new pbc::RepeatedField<global::libsignalservice.push.SyncMessage.Types.Sent.Types.UnidentifiedDeliveryStatus>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::libsignalservice.push.SyncMessage.Types.Sent.Types.UnidentifiedDeliveryStatus> UnidentifiedStatus {
          get { return unidentifiedStatus_; }
        }

        /// <summary>Field number for the "isRecipientUpdate" field.</summary>
        public const int IsRecipientUpdateFieldNumber = 6;
        private readonly static bool IsRecipientUpdateDefaultValue = false;

        private bool isRecipientUpdate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsRecipientUpdate {
          get { if ((_hasBits0 & 4) != 0) { return isRecipientUpdate_; } else { return IsRecipientUpdateDefaultValue; } }
          set {
            _hasBits0 |= 4;
            isRecipientUpdate_ = value;
          }
        }
        /// <summary>Gets whether the "isRecipientUpdate" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasIsRecipientUpdate {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "isRecipientUpdate" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIsRecipientUpdate() {
          _hasBits0 &= ~4;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Sent);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Sent other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Destination != other.Destination) return false;
          if (Timestamp != other.Timestamp) return false;
          if (!object.Equals(Message, other.Message)) return false;
          if (ExpirationStartTimestamp != other.ExpirationStartTimestamp) return false;
          if(!unidentifiedStatus_.Equals(other.unidentifiedStatus_)) return false;
          if (IsRecipientUpdate != other.IsRecipientUpdate) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasDestination) hash ^= Destination.GetHashCode();
          if (HasTimestamp) hash ^= Timestamp.GetHashCode();
          if (message_ != null) hash ^= Message.GetHashCode();
          if (HasExpirationStartTimestamp) hash ^= ExpirationStartTimestamp.GetHashCode();
          hash ^= unidentifiedStatus_.GetHashCode();
          if (HasIsRecipientUpdate) hash ^= IsRecipientUpdate.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasDestination) {
            output.WriteRawTag(10);
            output.WriteString(Destination);
          }
          if (HasTimestamp) {
            output.WriteRawTag(16);
            output.WriteUInt64(Timestamp);
          }
          if (message_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Message);
          }
          if (HasExpirationStartTimestamp) {
            output.WriteRawTag(32);
            output.WriteUInt64(ExpirationStartTimestamp);
          }
          unidentifiedStatus_.WriteTo(output, _repeated_unidentifiedStatus_codec);
          if (HasIsRecipientUpdate) {
            output.WriteRawTag(48);
            output.WriteBool(IsRecipientUpdate);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasDestination) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Destination);
          }
          if (HasTimestamp) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
          }
          if (message_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Message);
          }
          if (HasExpirationStartTimestamp) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExpirationStartTimestamp);
          }
          size += unidentifiedStatus_.CalculateSize(_repeated_unidentifiedStatus_codec);
          if (HasIsRecipientUpdate) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Sent other) {
          if (other == null) {
            return;
          }
          if (other.HasDestination) {
            Destination = other.Destination;
          }
          if (other.HasTimestamp) {
            Timestamp = other.Timestamp;
          }
          if (other.message_ != null) {
            if (message_ == null) {
              Message = new global::libsignalservice.push.DataMessage();
            }
            Message.MergeFrom(other.Message);
          }
          if (other.HasExpirationStartTimestamp) {
            ExpirationStartTimestamp = other.ExpirationStartTimestamp;
          }
          unidentifiedStatus_.Add(other.unidentifiedStatus_);
          if (other.HasIsRecipientUpdate) {
            IsRecipientUpdate = other.IsRecipientUpdate;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Destination = input.ReadString();
                break;
              }
              case 16: {
                Timestamp = input.ReadUInt64();
                break;
              }
              case 26: {
                if (message_ == null) {
                  Message = new global::libsignalservice.push.DataMessage();
                }
                input.ReadMessage(Message);
                break;
              }
              case 32: {
                ExpirationStartTimestamp = input.ReadUInt64();
                break;
              }
              case 42: {
                unidentifiedStatus_.AddEntriesFrom(input, _repeated_unidentifiedStatus_codec);
                break;
              }
              case 48: {
                IsRecipientUpdate = input.ReadBool();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Sent message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class UnidentifiedDeliveryStatus : pb::IMessage<UnidentifiedDeliveryStatus> {
            private static readonly pb::MessageParser<UnidentifiedDeliveryStatus> _parser = new pb::MessageParser<UnidentifiedDeliveryStatus>(() => new UnidentifiedDeliveryStatus());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<UnidentifiedDeliveryStatus> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::libsignalservice.push.SyncMessage.Types.Sent.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public UnidentifiedDeliveryStatus() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public UnidentifiedDeliveryStatus(UnidentifiedDeliveryStatus other) : this() {
              _hasBits0 = other._hasBits0;
              destination_ = other.destination_;
              unidentified_ = other.unidentified_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public UnidentifiedDeliveryStatus Clone() {
              return new UnidentifiedDeliveryStatus(this);
            }

            /// <summary>Field number for the "destination" field.</summary>
            public const int DestinationFieldNumber = 1;
            private readonly static string DestinationDefaultValue = "";

            private string destination_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Destination {
              get { return destination_ ?? DestinationDefaultValue; }
              set {
                destination_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "destination" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasDestination {
              get { return destination_ != null; }
            }
            /// <summary>Clears the value of the "destination" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearDestination() {
              destination_ = null;
            }

            /// <summary>Field number for the "unidentified" field.</summary>
            public const int UnidentifiedFieldNumber = 2;
            private readonly static bool UnidentifiedDefaultValue = false;

            private bool unidentified_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Unidentified {
              get { if ((_hasBits0 & 1) != 0) { return unidentified_; } else { return UnidentifiedDefaultValue; } }
              set {
                _hasBits0 |= 1;
                unidentified_ = value;
              }
            }
            /// <summary>Gets whether the "unidentified" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasUnidentified {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "unidentified" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearUnidentified() {
              _hasBits0 &= ~1;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as UnidentifiedDeliveryStatus);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(UnidentifiedDeliveryStatus other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Destination != other.Destination) return false;
              if (Unidentified != other.Unidentified) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasDestination) hash ^= Destination.GetHashCode();
              if (HasUnidentified) hash ^= Unidentified.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (HasDestination) {
                output.WriteRawTag(10);
                output.WriteString(Destination);
              }
              if (HasUnidentified) {
                output.WriteRawTag(16);
                output.WriteBool(Unidentified);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasDestination) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Destination);
              }
              if (HasUnidentified) {
                size += 1 + 1;
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(UnidentifiedDeliveryStatus other) {
              if (other == null) {
                return;
              }
              if (other.HasDestination) {
                Destination = other.Destination;
              }
              if (other.HasUnidentified) {
                Unidentified = other.Unidentified;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Destination = input.ReadString();
                    break;
                  }
                  case 16: {
                    Unidentified = input.ReadBool();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class Contacts : pb::IMessage<Contacts> {
        private static readonly pb::MessageParser<Contacts> _parser = new pb::MessageParser<Contacts>(() => new Contacts());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Contacts> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.SyncMessage.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Contacts() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Contacts(Contacts other) : this() {
          _hasBits0 = other._hasBits0;
          blob_ = other.blob_ != null ? other.blob_.Clone() : null;
          complete_ = other.complete_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Contacts Clone() {
          return new Contacts(this);
        }

        /// <summary>Field number for the "blob" field.</summary>
        public const int BlobFieldNumber = 1;
        private global::libsignalservice.push.AttachmentPointer blob_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::libsignalservice.push.AttachmentPointer Blob {
          get { return blob_; }
          set {
            blob_ = value;
          }
        }

        /// <summary>Field number for the "complete" field.</summary>
        public const int CompleteFieldNumber = 2;
        private readonly static bool CompleteDefaultValue = false;

        private bool complete_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Complete {
          get { if ((_hasBits0 & 1) != 0) { return complete_; } else { return CompleteDefaultValue; } }
          set {
            _hasBits0 |= 1;
            complete_ = value;
          }
        }
        /// <summary>Gets whether the "complete" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasComplete {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "complete" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearComplete() {
          _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Contacts);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Contacts other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Blob, other.Blob)) return false;
          if (Complete != other.Complete) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (blob_ != null) hash ^= Blob.GetHashCode();
          if (HasComplete) hash ^= Complete.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (blob_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Blob);
          }
          if (HasComplete) {
            output.WriteRawTag(16);
            output.WriteBool(Complete);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (blob_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Blob);
          }
          if (HasComplete) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Contacts other) {
          if (other == null) {
            return;
          }
          if (other.blob_ != null) {
            if (blob_ == null) {
              Blob = new global::libsignalservice.push.AttachmentPointer();
            }
            Blob.MergeFrom(other.Blob);
          }
          if (other.HasComplete) {
            Complete = other.Complete;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (blob_ == null) {
                  Blob = new global::libsignalservice.push.AttachmentPointer();
                }
                input.ReadMessage(Blob);
                break;
              }
              case 16: {
                Complete = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Groups : pb::IMessage<Groups> {
        private static readonly pb::MessageParser<Groups> _parser = new pb::MessageParser<Groups>(() => new Groups());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Groups> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.SyncMessage.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Groups() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Groups(Groups other) : this() {
          blob_ = other.blob_ != null ? other.blob_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Groups Clone() {
          return new Groups(this);
        }

        /// <summary>Field number for the "blob" field.</summary>
        public const int BlobFieldNumber = 1;
        private global::libsignalservice.push.AttachmentPointer blob_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::libsignalservice.push.AttachmentPointer Blob {
          get { return blob_; }
          set {
            blob_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Groups);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Groups other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Blob, other.Blob)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (blob_ != null) hash ^= Blob.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (blob_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Blob);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (blob_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Blob);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Groups other) {
          if (other == null) {
            return;
          }
          if (other.blob_ != null) {
            if (blob_ == null) {
              Blob = new global::libsignalservice.push.AttachmentPointer();
            }
            Blob.MergeFrom(other.Blob);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (blob_ == null) {
                  Blob = new global::libsignalservice.push.AttachmentPointer();
                }
                input.ReadMessage(Blob);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Blocked : pb::IMessage<Blocked> {
        private static readonly pb::MessageParser<Blocked> _parser = new pb::MessageParser<Blocked>(() => new Blocked());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Blocked> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.SyncMessage.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Blocked() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Blocked(Blocked other) : this() {
          numbers_ = other.numbers_.Clone();
          groupIds_ = other.groupIds_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Blocked Clone() {
          return new Blocked(this);
        }

        /// <summary>Field number for the "numbers" field.</summary>
        public const int NumbersFieldNumber = 1;
        private static readonly pb::FieldCodec<string> _repeated_numbers_codec
            = pb::FieldCodec.ForString(10);
        private readonly pbc::RepeatedField<string> numbers_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Numbers {
          get { return numbers_; }
        }

        /// <summary>Field number for the "groupIds" field.</summary>
        public const int GroupIdsFieldNumber = 2;
        private static readonly pb::FieldCodec<pb::ByteString> _repeated_groupIds_codec
            = pb::FieldCodec.ForBytes(18);
        private readonly pbc::RepeatedField<pb::ByteString> groupIds_ = new pbc::RepeatedField<pb::ByteString>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<pb::ByteString> GroupIds {
          get { return groupIds_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Blocked);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Blocked other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!numbers_.Equals(other.numbers_)) return false;
          if(!groupIds_.Equals(other.groupIds_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= numbers_.GetHashCode();
          hash ^= groupIds_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          numbers_.WriteTo(output, _repeated_numbers_codec);
          groupIds_.WriteTo(output, _repeated_groupIds_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += numbers_.CalculateSize(_repeated_numbers_codec);
          size += groupIds_.CalculateSize(_repeated_groupIds_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Blocked other) {
          if (other == null) {
            return;
          }
          numbers_.Add(other.numbers_);
          groupIds_.Add(other.groupIds_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                numbers_.AddEntriesFrom(input, _repeated_numbers_codec);
                break;
              }
              case 18: {
                groupIds_.AddEntriesFrom(input, _repeated_groupIds_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Request : pb::IMessage<Request> {
        private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Request> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.SyncMessage.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request(Request other) : this() {
          _hasBits0 = other._hasBits0;
          type_ = other.type_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request Clone() {
          return new Request(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private readonly static global::libsignalservice.push.SyncMessage.Types.Request.Types.Type TypeDefaultValue = global::libsignalservice.push.SyncMessage.Types.Request.Types.Type.Unknown;

        private global::libsignalservice.push.SyncMessage.Types.Request.Types.Type type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::libsignalservice.push.SyncMessage.Types.Request.Types.Type Type {
          get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
          set {
            _hasBits0 |= 1;
            type_ = value;
          }
        }
        /// <summary>Gets whether the "type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasType {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearType() {
          _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Request);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Request other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Type != other.Type) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasType) hash ^= Type.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasType) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Type);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasType) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Request other) {
          if (other == null) {
            return;
          }
          if (other.HasType) {
            Type = other.Type;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Type = (global::libsignalservice.push.SyncMessage.Types.Request.Types.Type) input.ReadEnum();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Request message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum Type {
            [pbr::OriginalName("UNKNOWN")] Unknown = 0,
            [pbr::OriginalName("CONTACTS")] Contacts = 1,
            [pbr::OriginalName("GROUPS")] Groups = 2,
            [pbr::OriginalName("BLOCKED")] Blocked = 3,
            [pbr::OriginalName("CONFIGURATION")] Configuration = 4,
          }

        }
        #endregion

      }

      public sealed partial class Read : pb::IMessage<Read> {
        private static readonly pb::MessageParser<Read> _parser = new pb::MessageParser<Read>(() => new Read());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Read> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.SyncMessage.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Read() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Read(Read other) : this() {
          _hasBits0 = other._hasBits0;
          sender_ = other.sender_;
          timestamp_ = other.timestamp_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Read Clone() {
          return new Read(this);
        }

        /// <summary>Field number for the "sender" field.</summary>
        public const int SenderFieldNumber = 1;
        private readonly static string SenderDefaultValue = "";

        private string sender_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Sender {
          get { return sender_ ?? SenderDefaultValue; }
          set {
            sender_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "sender" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSender {
          get { return sender_ != null; }
        }
        /// <summary>Clears the value of the "sender" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSender() {
          sender_ = null;
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 2;
        private readonly static ulong TimestampDefaultValue = 0UL;

        private ulong timestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Timestamp {
          get { if ((_hasBits0 & 1) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
          set {
            _hasBits0 |= 1;
            timestamp_ = value;
          }
        }
        /// <summary>Gets whether the "timestamp" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTimestamp {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "timestamp" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTimestamp() {
          _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Read);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Read other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Sender != other.Sender) return false;
          if (Timestamp != other.Timestamp) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasSender) hash ^= Sender.GetHashCode();
          if (HasTimestamp) hash ^= Timestamp.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasSender) {
            output.WriteRawTag(10);
            output.WriteString(Sender);
          }
          if (HasTimestamp) {
            output.WriteRawTag(16);
            output.WriteUInt64(Timestamp);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasSender) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Sender);
          }
          if (HasTimestamp) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Read other) {
          if (other == null) {
            return;
          }
          if (other.HasSender) {
            Sender = other.Sender;
          }
          if (other.HasTimestamp) {
            Timestamp = other.Timestamp;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Sender = input.ReadString();
                break;
              }
              case 16: {
                Timestamp = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Configuration : pb::IMessage<Configuration> {
        private static readonly pb::MessageParser<Configuration> _parser = new pb::MessageParser<Configuration>(() => new Configuration());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Configuration> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.SyncMessage.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Configuration() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Configuration(Configuration other) : this() {
          _hasBits0 = other._hasBits0;
          readReceipts_ = other.readReceipts_;
          unidentifiedDeliveryIndicators_ = other.unidentifiedDeliveryIndicators_;
          typingIndicators_ = other.typingIndicators_;
          linkPreviews_ = other.linkPreviews_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Configuration Clone() {
          return new Configuration(this);
        }

        /// <summary>Field number for the "readReceipts" field.</summary>
        public const int ReadReceiptsFieldNumber = 1;
        private readonly static bool ReadReceiptsDefaultValue = false;

        private bool readReceipts_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool ReadReceipts {
          get { if ((_hasBits0 & 1) != 0) { return readReceipts_; } else { return ReadReceiptsDefaultValue; } }
          set {
            _hasBits0 |= 1;
            readReceipts_ = value;
          }
        }
        /// <summary>Gets whether the "readReceipts" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasReadReceipts {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "readReceipts" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearReadReceipts() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "unidentifiedDeliveryIndicators" field.</summary>
        public const int UnidentifiedDeliveryIndicatorsFieldNumber = 2;
        private readonly static bool UnidentifiedDeliveryIndicatorsDefaultValue = false;

        private bool unidentifiedDeliveryIndicators_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool UnidentifiedDeliveryIndicators {
          get { if ((_hasBits0 & 2) != 0) { return unidentifiedDeliveryIndicators_; } else { return UnidentifiedDeliveryIndicatorsDefaultValue; } }
          set {
            _hasBits0 |= 2;
            unidentifiedDeliveryIndicators_ = value;
          }
        }
        /// <summary>Gets whether the "unidentifiedDeliveryIndicators" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUnidentifiedDeliveryIndicators {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "unidentifiedDeliveryIndicators" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUnidentifiedDeliveryIndicators() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "typingIndicators" field.</summary>
        public const int TypingIndicatorsFieldNumber = 3;
        private readonly static bool TypingIndicatorsDefaultValue = false;

        private bool typingIndicators_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool TypingIndicators {
          get { if ((_hasBits0 & 4) != 0) { return typingIndicators_; } else { return TypingIndicatorsDefaultValue; } }
          set {
            _hasBits0 |= 4;
            typingIndicators_ = value;
          }
        }
        /// <summary>Gets whether the "typingIndicators" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTypingIndicators {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "typingIndicators" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTypingIndicators() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "linkPreviews" field.</summary>
        public const int LinkPreviewsFieldNumber = 4;
        private readonly static bool LinkPreviewsDefaultValue = false;

        private bool linkPreviews_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool LinkPreviews {
          get { if ((_hasBits0 & 8) != 0) { return linkPreviews_; } else { return LinkPreviewsDefaultValue; } }
          set {
            _hasBits0 |= 8;
            linkPreviews_ = value;
          }
        }
        /// <summary>Gets whether the "linkPreviews" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLinkPreviews {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "linkPreviews" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLinkPreviews() {
          _hasBits0 &= ~8;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Configuration);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Configuration other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ReadReceipts != other.ReadReceipts) return false;
          if (UnidentifiedDeliveryIndicators != other.UnidentifiedDeliveryIndicators) return false;
          if (TypingIndicators != other.TypingIndicators) return false;
          if (LinkPreviews != other.LinkPreviews) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasReadReceipts) hash ^= ReadReceipts.GetHashCode();
          if (HasUnidentifiedDeliveryIndicators) hash ^= UnidentifiedDeliveryIndicators.GetHashCode();
          if (HasTypingIndicators) hash ^= TypingIndicators.GetHashCode();
          if (HasLinkPreviews) hash ^= LinkPreviews.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasReadReceipts) {
            output.WriteRawTag(8);
            output.WriteBool(ReadReceipts);
          }
          if (HasUnidentifiedDeliveryIndicators) {
            output.WriteRawTag(16);
            output.WriteBool(UnidentifiedDeliveryIndicators);
          }
          if (HasTypingIndicators) {
            output.WriteRawTag(24);
            output.WriteBool(TypingIndicators);
          }
          if (HasLinkPreviews) {
            output.WriteRawTag(32);
            output.WriteBool(LinkPreviews);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasReadReceipts) {
            size += 1 + 1;
          }
          if (HasUnidentifiedDeliveryIndicators) {
            size += 1 + 1;
          }
          if (HasTypingIndicators) {
            size += 1 + 1;
          }
          if (HasLinkPreviews) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Configuration other) {
          if (other == null) {
            return;
          }
          if (other.HasReadReceipts) {
            ReadReceipts = other.ReadReceipts;
          }
          if (other.HasUnidentifiedDeliveryIndicators) {
            UnidentifiedDeliveryIndicators = other.UnidentifiedDeliveryIndicators;
          }
          if (other.HasTypingIndicators) {
            TypingIndicators = other.TypingIndicators;
          }
          if (other.HasLinkPreviews) {
            LinkPreviews = other.LinkPreviews;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ReadReceipts = input.ReadBool();
                break;
              }
              case 16: {
                UnidentifiedDeliveryIndicators = input.ReadBool();
                break;
              }
              case 24: {
                TypingIndicators = input.ReadBool();
                break;
              }
              case 32: {
                LinkPreviews = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class StickerPackOperation : pb::IMessage<StickerPackOperation> {
        private static readonly pb::MessageParser<StickerPackOperation> _parser = new pb::MessageParser<StickerPackOperation>(() => new StickerPackOperation());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StickerPackOperation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.SyncMessage.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StickerPackOperation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StickerPackOperation(StickerPackOperation other) : this() {
          _hasBits0 = other._hasBits0;
          packId_ = other.packId_;
          packKey_ = other.packKey_;
          type_ = other.type_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StickerPackOperation Clone() {
          return new StickerPackOperation(this);
        }

        /// <summary>Field number for the "packId" field.</summary>
        public const int PackIdFieldNumber = 1;
        private readonly static pb::ByteString PackIdDefaultValue = pb::ByteString.Empty;

        private pb::ByteString packId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString PackId {
          get { return packId_ ?? PackIdDefaultValue; }
          set {
            packId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "packId" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPackId {
          get { return packId_ != null; }
        }
        /// <summary>Clears the value of the "packId" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPackId() {
          packId_ = null;
        }

        /// <summary>Field number for the "packKey" field.</summary>
        public const int PackKeyFieldNumber = 2;
        private readonly static pb::ByteString PackKeyDefaultValue = pb::ByteString.Empty;

        private pb::ByteString packKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString PackKey {
          get { return packKey_ ?? PackKeyDefaultValue; }
          set {
            packKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "packKey" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPackKey {
          get { return packKey_ != null; }
        }
        /// <summary>Clears the value of the "packKey" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPackKey() {
          packKey_ = null;
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 3;
        private readonly static global::libsignalservice.push.SyncMessage.Types.StickerPackOperation.Types.Type TypeDefaultValue = global::libsignalservice.push.SyncMessage.Types.StickerPackOperation.Types.Type.Install;

        private global::libsignalservice.push.SyncMessage.Types.StickerPackOperation.Types.Type type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::libsignalservice.push.SyncMessage.Types.StickerPackOperation.Types.Type Type {
          get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
          set {
            _hasBits0 |= 1;
            type_ = value;
          }
        }
        /// <summary>Gets whether the "type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasType {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearType() {
          _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as StickerPackOperation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StickerPackOperation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PackId != other.PackId) return false;
          if (PackKey != other.PackKey) return false;
          if (Type != other.Type) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasPackId) hash ^= PackId.GetHashCode();
          if (HasPackKey) hash ^= PackKey.GetHashCode();
          if (HasType) hash ^= Type.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasPackId) {
            output.WriteRawTag(10);
            output.WriteBytes(PackId);
          }
          if (HasPackKey) {
            output.WriteRawTag(18);
            output.WriteBytes(PackKey);
          }
          if (HasType) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Type);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasPackId) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(PackId);
          }
          if (HasPackKey) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(PackKey);
          }
          if (HasType) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StickerPackOperation other) {
          if (other == null) {
            return;
          }
          if (other.HasPackId) {
            PackId = other.PackId;
          }
          if (other.HasPackKey) {
            PackKey = other.PackKey;
          }
          if (other.HasType) {
            Type = other.Type;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                PackId = input.ReadBytes();
                break;
              }
              case 18: {
                PackKey = input.ReadBytes();
                break;
              }
              case 24: {
                Type = (global::libsignalservice.push.SyncMessage.Types.StickerPackOperation.Types.Type) input.ReadEnum();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the StickerPackOperation message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum Type {
            [pbr::OriginalName("INSTALL")] Install = 0,
            [pbr::OriginalName("REMOVE")] Remove = 1,
          }

        }
        #endregion

      }

      public sealed partial class MessageTimerRead : pb::IMessage<MessageTimerRead> {
        private static readonly pb::MessageParser<MessageTimerRead> _parser = new pb::MessageParser<MessageTimerRead>(() => new MessageTimerRead());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MessageTimerRead> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.SyncMessage.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MessageTimerRead() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MessageTimerRead(MessageTimerRead other) : this() {
          _hasBits0 = other._hasBits0;
          sender_ = other.sender_;
          timestamp_ = other.timestamp_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MessageTimerRead Clone() {
          return new MessageTimerRead(this);
        }

        /// <summary>Field number for the "sender" field.</summary>
        public const int SenderFieldNumber = 1;
        private readonly static string SenderDefaultValue = "";

        private string sender_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Sender {
          get { return sender_ ?? SenderDefaultValue; }
          set {
            sender_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "sender" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSender {
          get { return sender_ != null; }
        }
        /// <summary>Clears the value of the "sender" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSender() {
          sender_ = null;
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 2;
        private readonly static ulong TimestampDefaultValue = 0UL;

        private ulong timestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Timestamp {
          get { if ((_hasBits0 & 1) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
          set {
            _hasBits0 |= 1;
            timestamp_ = value;
          }
        }
        /// <summary>Gets whether the "timestamp" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTimestamp {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "timestamp" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTimestamp() {
          _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MessageTimerRead);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MessageTimerRead other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Sender != other.Sender) return false;
          if (Timestamp != other.Timestamp) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasSender) hash ^= Sender.GetHashCode();
          if (HasTimestamp) hash ^= Timestamp.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasSender) {
            output.WriteRawTag(10);
            output.WriteString(Sender);
          }
          if (HasTimestamp) {
            output.WriteRawTag(16);
            output.WriteUInt64(Timestamp);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasSender) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Sender);
          }
          if (HasTimestamp) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MessageTimerRead other) {
          if (other == null) {
            return;
          }
          if (other.HasSender) {
            Sender = other.Sender;
          }
          if (other.HasTimestamp) {
            Timestamp = other.Timestamp;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Sender = input.ReadString();
                break;
              }
              case 16: {
                Timestamp = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class AttachmentPointer : pb::IMessage<AttachmentPointer> {
    private static readonly pb::MessageParser<AttachmentPointer> _parser = new pb::MessageParser<AttachmentPointer>(() => new AttachmentPointer());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttachmentPointer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::libsignalservice.push.SignalServiceReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachmentPointer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachmentPointer(AttachmentPointer other) : this() {
      _hasBits0 = other._hasBits0;
      contentType_ = other.contentType_;
      key_ = other.key_;
      size_ = other.size_;
      thumbnail_ = other.thumbnail_;
      digest_ = other.digest_;
      fileName_ = other.fileName_;
      flags_ = other.flags_;
      width_ = other.width_;
      height_ = other.height_;
      caption_ = other.caption_;
      blurHash_ = other.blurHash_;
      uploadTimestamp_ = other.uploadTimestamp_;
      cdnNumber_ = other.cdnNumber_;
      switch (other.AttachmentIdentifierCase) {
        case AttachmentIdentifierOneofCase.CdnId:
          CdnId = other.CdnId;
          break;
        case AttachmentIdentifierOneofCase.CdnKey:
          CdnKey = other.CdnKey;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachmentPointer Clone() {
      return new AttachmentPointer(this);
    }

    /// <summary>Field number for the "cdnId" field.</summary>
    public const int CdnIdFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CdnId {
      get { return HasCdnId ? (ulong) attachmentIdentifier_ : 0UL; }
      set {
        attachmentIdentifier_ = value;
        attachmentIdentifierCase_ = AttachmentIdentifierOneofCase.CdnId;
      }
    }
    /// <summary>Gets whether the "cdnId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCdnId {
      get { return attachmentIdentifierCase_ == AttachmentIdentifierOneofCase.CdnId; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "cdnId" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCdnId() {
      if (HasCdnId) {
        ClearAttachmentIdentifier();
      }
    }

    /// <summary>Field number for the "cdnKey" field.</summary>
    public const int CdnKeyFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CdnKey {
      get { return HasCdnKey ? (string) attachmentIdentifier_ : ""; }
      set {
        attachmentIdentifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        attachmentIdentifierCase_ = AttachmentIdentifierOneofCase.CdnKey;
      }
    }
    /// <summary>Gets whether the "cdnKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCdnKey {
      get { return attachmentIdentifierCase_ == AttachmentIdentifierOneofCase.CdnKey; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "cdnKey" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCdnKey() {
      if (HasCdnKey) {
        ClearAttachmentIdentifier();
      }
    }

    /// <summary>Field number for the "contentType" field.</summary>
    public const int ContentTypeFieldNumber = 2;
    private readonly static string ContentTypeDefaultValue = "";

    private string contentType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContentType {
      get { return contentType_ ?? ContentTypeDefaultValue; }
      set {
        contentType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "contentType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasContentType {
      get { return contentType_ != null; }
    }
    /// <summary>Clears the value of the "contentType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContentType() {
      contentType_ = null;
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 3;
    private readonly static pb::ByteString KeyDefaultValue = pb::ByteString.Empty;

    private pb::ByteString key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Key {
      get { return key_ ?? KeyDefaultValue; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKey {
      get { return key_ != null; }
    }
    /// <summary>Clears the value of the "key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKey() {
      key_ = null;
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 4;
    private readonly static uint SizeDefaultValue = 0;

    private uint size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Size {
      get { if ((_hasBits0 & 1) != 0) { return size_; } else { return SizeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        size_ = value;
      }
    }
    /// <summary>Gets whether the "size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSize {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "size" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSize() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "thumbnail" field.</summary>
    public const int ThumbnailFieldNumber = 5;
    private readonly static pb::ByteString ThumbnailDefaultValue = pb::ByteString.Empty;

    private pb::ByteString thumbnail_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Thumbnail {
      get { return thumbnail_ ?? ThumbnailDefaultValue; }
      set {
        thumbnail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "thumbnail" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasThumbnail {
      get { return thumbnail_ != null; }
    }
    /// <summary>Clears the value of the "thumbnail" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearThumbnail() {
      thumbnail_ = null;
    }

    /// <summary>Field number for the "digest" field.</summary>
    public const int DigestFieldNumber = 6;
    private readonly static pb::ByteString DigestDefaultValue = pb::ByteString.Empty;

    private pb::ByteString digest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Digest {
      get { return digest_ ?? DigestDefaultValue; }
      set {
        digest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "digest" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDigest {
      get { return digest_ != null; }
    }
    /// <summary>Clears the value of the "digest" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDigest() {
      digest_ = null;
    }

    /// <summary>Field number for the "fileName" field.</summary>
    public const int FileNameFieldNumber = 7;
    private readonly static string FileNameDefaultValue = "";

    private string fileName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_ ?? FileNameDefaultValue; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "fileName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFileName {
      get { return fileName_ != null; }
    }
    /// <summary>Clears the value of the "fileName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFileName() {
      fileName_ = null;
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 8;
    private readonly static uint FlagsDefaultValue = 0;

    private uint flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flags {
      get { if ((_hasBits0 & 2) != 0) { return flags_; } else { return FlagsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        flags_ = value;
      }
    }
    /// <summary>Gets whether the "flags" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFlags {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "flags" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFlags() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 9;
    private readonly static uint WidthDefaultValue = 0;

    private uint width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Width {
      get { if ((_hasBits0 & 4) != 0) { return width_; } else { return WidthDefaultValue; } }
      set {
        _hasBits0 |= 4;
        width_ = value;
      }
    }
    /// <summary>Gets whether the "width" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWidth {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "width" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWidth() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 10;
    private readonly static uint HeightDefaultValue = 0;

    private uint height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Height {
      get { if ((_hasBits0 & 8) != 0) { return height_; } else { return HeightDefaultValue; } }
      set {
        _hasBits0 |= 8;
        height_ = value;
      }
    }
    /// <summary>Gets whether the "height" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeight {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "height" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeight() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "caption" field.</summary>
    public const int CaptionFieldNumber = 11;
    private readonly static string CaptionDefaultValue = "";

    private string caption_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Caption {
      get { return caption_ ?? CaptionDefaultValue; }
      set {
        caption_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "caption" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCaption {
      get { return caption_ != null; }
    }
    /// <summary>Clears the value of the "caption" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCaption() {
      caption_ = null;
    }

    /// <summary>Field number for the "blurHash" field.</summary>
    public const int BlurHashFieldNumber = 12;
    private readonly static string BlurHashDefaultValue = "";

    private string blurHash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BlurHash {
      get { return blurHash_ ?? BlurHashDefaultValue; }
      set {
        blurHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "blurHash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBlurHash {
      get { return blurHash_ != null; }
    }
    /// <summary>Clears the value of the "blurHash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBlurHash() {
      blurHash_ = null;
    }

    /// <summary>Field number for the "uploadTimestamp" field.</summary>
    public const int UploadTimestampFieldNumber = 13;
    private readonly static ulong UploadTimestampDefaultValue = 0UL;

    private ulong uploadTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UploadTimestamp {
      get { if ((_hasBits0 & 16) != 0) { return uploadTimestamp_; } else { return UploadTimestampDefaultValue; } }
      set {
        _hasBits0 |= 16;
        uploadTimestamp_ = value;
      }
    }
    /// <summary>Gets whether the "uploadTimestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUploadTimestamp {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "uploadTimestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUploadTimestamp() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "cdnNumber" field.</summary>
    public const int CdnNumberFieldNumber = 14;
    private readonly static uint CdnNumberDefaultValue = 0;

    private uint cdnNumber_;
    /// <summary>
    /// Next ID: 16
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CdnNumber {
      get { if ((_hasBits0 & 32) != 0) { return cdnNumber_; } else { return CdnNumberDefaultValue; } }
      set {
        _hasBits0 |= 32;
        cdnNumber_ = value;
      }
    }
    /// <summary>Gets whether the "cdnNumber" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCdnNumber {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "cdnNumber" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCdnNumber() {
      _hasBits0 &= ~32;
    }

    private object attachmentIdentifier_;
    /// <summary>Enum of possible cases for the "attachment_identifier" oneof.</summary>
    public enum AttachmentIdentifierOneofCase {
      None = 0,
      CdnId = 1,
      CdnKey = 15,
    }
    private AttachmentIdentifierOneofCase attachmentIdentifierCase_ = AttachmentIdentifierOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachmentIdentifierOneofCase AttachmentIdentifierCase {
      get { return attachmentIdentifierCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAttachmentIdentifier() {
      attachmentIdentifierCase_ = AttachmentIdentifierOneofCase.None;
      attachmentIdentifier_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttachmentPointer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttachmentPointer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CdnId != other.CdnId) return false;
      if (CdnKey != other.CdnKey) return false;
      if (ContentType != other.ContentType) return false;
      if (Key != other.Key) return false;
      if (Size != other.Size) return false;
      if (Thumbnail != other.Thumbnail) return false;
      if (Digest != other.Digest) return false;
      if (FileName != other.FileName) return false;
      if (Flags != other.Flags) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (Caption != other.Caption) return false;
      if (BlurHash != other.BlurHash) return false;
      if (UploadTimestamp != other.UploadTimestamp) return false;
      if (CdnNumber != other.CdnNumber) return false;
      if (AttachmentIdentifierCase != other.AttachmentIdentifierCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCdnId) hash ^= CdnId.GetHashCode();
      if (HasCdnKey) hash ^= CdnKey.GetHashCode();
      if (HasContentType) hash ^= ContentType.GetHashCode();
      if (HasKey) hash ^= Key.GetHashCode();
      if (HasSize) hash ^= Size.GetHashCode();
      if (HasThumbnail) hash ^= Thumbnail.GetHashCode();
      if (HasDigest) hash ^= Digest.GetHashCode();
      if (HasFileName) hash ^= FileName.GetHashCode();
      if (HasFlags) hash ^= Flags.GetHashCode();
      if (HasWidth) hash ^= Width.GetHashCode();
      if (HasHeight) hash ^= Height.GetHashCode();
      if (HasCaption) hash ^= Caption.GetHashCode();
      if (HasBlurHash) hash ^= BlurHash.GetHashCode();
      if (HasUploadTimestamp) hash ^= UploadTimestamp.GetHashCode();
      if (HasCdnNumber) hash ^= CdnNumber.GetHashCode();
      hash ^= (int) attachmentIdentifierCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasCdnId) {
        output.WriteRawTag(9);
        output.WriteFixed64(CdnId);
      }
      if (HasContentType) {
        output.WriteRawTag(18);
        output.WriteString(ContentType);
      }
      if (HasKey) {
        output.WriteRawTag(26);
        output.WriteBytes(Key);
      }
      if (HasSize) {
        output.WriteRawTag(32);
        output.WriteUInt32(Size);
      }
      if (HasThumbnail) {
        output.WriteRawTag(42);
        output.WriteBytes(Thumbnail);
      }
      if (HasDigest) {
        output.WriteRawTag(50);
        output.WriteBytes(Digest);
      }
      if (HasFileName) {
        output.WriteRawTag(58);
        output.WriteString(FileName);
      }
      if (HasFlags) {
        output.WriteRawTag(64);
        output.WriteUInt32(Flags);
      }
      if (HasWidth) {
        output.WriteRawTag(72);
        output.WriteUInt32(Width);
      }
      if (HasHeight) {
        output.WriteRawTag(80);
        output.WriteUInt32(Height);
      }
      if (HasCaption) {
        output.WriteRawTag(90);
        output.WriteString(Caption);
      }
      if (HasBlurHash) {
        output.WriteRawTag(98);
        output.WriteString(BlurHash);
      }
      if (HasUploadTimestamp) {
        output.WriteRawTag(104);
        output.WriteUInt64(UploadTimestamp);
      }
      if (HasCdnNumber) {
        output.WriteRawTag(112);
        output.WriteUInt32(CdnNumber);
      }
      if (HasCdnKey) {
        output.WriteRawTag(122);
        output.WriteString(CdnKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCdnId) {
        size += 1 + 8;
      }
      if (HasCdnKey) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CdnKey);
      }
      if (HasContentType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContentType);
      }
      if (HasKey) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Key);
      }
      if (HasSize) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Size);
      }
      if (HasThumbnail) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Thumbnail);
      }
      if (HasDigest) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Digest);
      }
      if (HasFileName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (HasFlags) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
      }
      if (HasWidth) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
      }
      if (HasHeight) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
      }
      if (HasCaption) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Caption);
      }
      if (HasBlurHash) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BlurHash);
      }
      if (HasUploadTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UploadTimestamp);
      }
      if (HasCdnNumber) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CdnNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttachmentPointer other) {
      if (other == null) {
        return;
      }
      if (other.HasContentType) {
        ContentType = other.ContentType;
      }
      if (other.HasKey) {
        Key = other.Key;
      }
      if (other.HasSize) {
        Size = other.Size;
      }
      if (other.HasThumbnail) {
        Thumbnail = other.Thumbnail;
      }
      if (other.HasDigest) {
        Digest = other.Digest;
      }
      if (other.HasFileName) {
        FileName = other.FileName;
      }
      if (other.HasFlags) {
        Flags = other.Flags;
      }
      if (other.HasWidth) {
        Width = other.Width;
      }
      if (other.HasHeight) {
        Height = other.Height;
      }
      if (other.HasCaption) {
        Caption = other.Caption;
      }
      if (other.HasBlurHash) {
        BlurHash = other.BlurHash;
      }
      if (other.HasUploadTimestamp) {
        UploadTimestamp = other.UploadTimestamp;
      }
      if (other.HasCdnNumber) {
        CdnNumber = other.CdnNumber;
      }
      switch (other.AttachmentIdentifierCase) {
        case AttachmentIdentifierOneofCase.CdnId:
          CdnId = other.CdnId;
          break;
        case AttachmentIdentifierOneofCase.CdnKey:
          CdnKey = other.CdnKey;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            CdnId = input.ReadFixed64();
            break;
          }
          case 18: {
            ContentType = input.ReadString();
            break;
          }
          case 26: {
            Key = input.ReadBytes();
            break;
          }
          case 32: {
            Size = input.ReadUInt32();
            break;
          }
          case 42: {
            Thumbnail = input.ReadBytes();
            break;
          }
          case 50: {
            Digest = input.ReadBytes();
            break;
          }
          case 58: {
            FileName = input.ReadString();
            break;
          }
          case 64: {
            Flags = input.ReadUInt32();
            break;
          }
          case 72: {
            Width = input.ReadUInt32();
            break;
          }
          case 80: {
            Height = input.ReadUInt32();
            break;
          }
          case 90: {
            Caption = input.ReadString();
            break;
          }
          case 98: {
            BlurHash = input.ReadString();
            break;
          }
          case 104: {
            UploadTimestamp = input.ReadUInt64();
            break;
          }
          case 112: {
            CdnNumber = input.ReadUInt32();
            break;
          }
          case 122: {
            CdnKey = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AttachmentPointer message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Flags {
        [pbr::OriginalName("VOICE_MESSAGE")] VoiceMessage = 1,
      }

    }
    #endregion

  }

  public sealed partial class GroupContext : pb::IMessage<GroupContext> {
    private static readonly pb::MessageParser<GroupContext> _parser = new pb::MessageParser<GroupContext>(() => new GroupContext());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::libsignalservice.push.SignalServiceReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupContext(GroupContext other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      type_ = other.type_;
      name_ = other.name_;
      members_ = other.members_.Clone();
      avatar_ = other.avatar_ != null ? other.avatar_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupContext Clone() {
      return new GroupContext(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static pb::ByteString IdDefaultValue = pb::ByteString.Empty;

    private pb::ByteString id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private readonly static global::libsignalservice.push.GroupContext.Types.Type TypeDefaultValue = global::libsignalservice.push.GroupContext.Types.Type.Unknown;

    private global::libsignalservice.push.GroupContext.Types.Type type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.GroupContext.Types.Type Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_members_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> members_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Members {
      get { return members_; }
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 5;
    private global::libsignalservice.push.AttachmentPointer avatar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.AttachmentPointer Avatar {
      get { return avatar_; }
      set {
        avatar_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (Name != other.Name) return false;
      if(!members_.Equals(other.members_)) return false;
      if (!object.Equals(Avatar, other.Avatar)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      hash ^= members_.GetHashCode();
      if (avatar_ != null) hash ^= Avatar.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteBytes(Id);
      }
      if (HasType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      members_.WriteTo(output, _repeated_members_codec);
      if (avatar_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Avatar);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Id);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += members_.CalculateSize(_repeated_members_codec);
      if (avatar_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Avatar);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupContext other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      members_.Add(other.members_);
      if (other.avatar_ != null) {
        if (avatar_ == null) {
          Avatar = new global::libsignalservice.push.AttachmentPointer();
        }
        Avatar.MergeFrom(other.Avatar);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadBytes();
            break;
          }
          case 16: {
            Type = (global::libsignalservice.push.GroupContext.Types.Type) input.ReadEnum();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
          case 42: {
            if (avatar_ == null) {
              Avatar = new global::libsignalservice.push.AttachmentPointer();
            }
            input.ReadMessage(Avatar);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GroupContext message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("UPDATE")] Update = 1,
        [pbr::OriginalName("DELIVER")] Deliver = 2,
        [pbr::OriginalName("QUIT")] Quit = 3,
        [pbr::OriginalName("REQUEST_INFO")] RequestInfo = 4,
      }

    }
    #endregion

  }

  public sealed partial class ContactDetails : pb::IMessage<ContactDetails> {
    private static readonly pb::MessageParser<ContactDetails> _parser = new pb::MessageParser<ContactDetails>(() => new ContactDetails());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContactDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::libsignalservice.push.SignalServiceReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContactDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContactDetails(ContactDetails other) : this() {
      _hasBits0 = other._hasBits0;
      number_ = other.number_;
      name_ = other.name_;
      avatar_ = other.avatar_ != null ? other.avatar_.Clone() : null;
      color_ = other.color_;
      verified_ = other.verified_ != null ? other.verified_.Clone() : null;
      profileKey_ = other.profileKey_;
      blocked_ = other.blocked_;
      expireTimer_ = other.expireTimer_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContactDetails Clone() {
      return new ContactDetails(this);
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 1;
    private readonly static string NumberDefaultValue = "";

    private string number_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Number {
      get { return number_ ?? NumberDefaultValue; }
      set {
        number_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "number" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNumber {
      get { return number_ != null; }
    }
    /// <summary>Clears the value of the "number" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNumber() {
      number_ = null;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 3;
    private global::libsignalservice.push.ContactDetails.Types.Avatar avatar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.ContactDetails.Types.Avatar Avatar {
      get { return avatar_; }
      set {
        avatar_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 4;
    private readonly static string ColorDefaultValue = "";

    private string color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Color {
      get { return color_ ?? ColorDefaultValue; }
      set {
        color_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "color" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasColor {
      get { return color_ != null; }
    }
    /// <summary>Clears the value of the "color" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearColor() {
      color_ = null;
    }

    /// <summary>Field number for the "verified" field.</summary>
    public const int VerifiedFieldNumber = 5;
    private global::libsignalservice.push.Verified verified_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.Verified Verified {
      get { return verified_; }
      set {
        verified_ = value;
      }
    }

    /// <summary>Field number for the "profileKey" field.</summary>
    public const int ProfileKeyFieldNumber = 6;
    private readonly static pb::ByteString ProfileKeyDefaultValue = pb::ByteString.Empty;

    private pb::ByteString profileKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ProfileKey {
      get { return profileKey_ ?? ProfileKeyDefaultValue; }
      set {
        profileKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "profileKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProfileKey {
      get { return profileKey_ != null; }
    }
    /// <summary>Clears the value of the "profileKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProfileKey() {
      profileKey_ = null;
    }

    /// <summary>Field number for the "blocked" field.</summary>
    public const int BlockedFieldNumber = 7;
    private readonly static bool BlockedDefaultValue = false;

    private bool blocked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Blocked {
      get { if ((_hasBits0 & 1) != 0) { return blocked_; } else { return BlockedDefaultValue; } }
      set {
        _hasBits0 |= 1;
        blocked_ = value;
      }
    }
    /// <summary>Gets whether the "blocked" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBlocked {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "blocked" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBlocked() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "expireTimer" field.</summary>
    public const int ExpireTimerFieldNumber = 8;
    private readonly static uint ExpireTimerDefaultValue = 0;

    private uint expireTimer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExpireTimer {
      get { if ((_hasBits0 & 2) != 0) { return expireTimer_; } else { return ExpireTimerDefaultValue; } }
      set {
        _hasBits0 |= 2;
        expireTimer_ = value;
      }
    }
    /// <summary>Gets whether the "expireTimer" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExpireTimer {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "expireTimer" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExpireTimer() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContactDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContactDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Number != other.Number) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(Avatar, other.Avatar)) return false;
      if (Color != other.Color) return false;
      if (!object.Equals(Verified, other.Verified)) return false;
      if (ProfileKey != other.ProfileKey) return false;
      if (Blocked != other.Blocked) return false;
      if (ExpireTimer != other.ExpireTimer) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasNumber) hash ^= Number.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (avatar_ != null) hash ^= Avatar.GetHashCode();
      if (HasColor) hash ^= Color.GetHashCode();
      if (verified_ != null) hash ^= Verified.GetHashCode();
      if (HasProfileKey) hash ^= ProfileKey.GetHashCode();
      if (HasBlocked) hash ^= Blocked.GetHashCode();
      if (HasExpireTimer) hash ^= ExpireTimer.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasNumber) {
        output.WriteRawTag(10);
        output.WriteString(Number);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (avatar_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Avatar);
      }
      if (HasColor) {
        output.WriteRawTag(34);
        output.WriteString(Color);
      }
      if (verified_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Verified);
      }
      if (HasProfileKey) {
        output.WriteRawTag(50);
        output.WriteBytes(ProfileKey);
      }
      if (HasBlocked) {
        output.WriteRawTag(56);
        output.WriteBool(Blocked);
      }
      if (HasExpireTimer) {
        output.WriteRawTag(64);
        output.WriteUInt32(ExpireTimer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasNumber) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Number);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (avatar_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Avatar);
      }
      if (HasColor) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Color);
      }
      if (verified_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Verified);
      }
      if (HasProfileKey) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ProfileKey);
      }
      if (HasBlocked) {
        size += 1 + 1;
      }
      if (HasExpireTimer) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExpireTimer);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContactDetails other) {
      if (other == null) {
        return;
      }
      if (other.HasNumber) {
        Number = other.Number;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.avatar_ != null) {
        if (avatar_ == null) {
          Avatar = new global::libsignalservice.push.ContactDetails.Types.Avatar();
        }
        Avatar.MergeFrom(other.Avatar);
      }
      if (other.HasColor) {
        Color = other.Color;
      }
      if (other.verified_ != null) {
        if (verified_ == null) {
          Verified = new global::libsignalservice.push.Verified();
        }
        Verified.MergeFrom(other.Verified);
      }
      if (other.HasProfileKey) {
        ProfileKey = other.ProfileKey;
      }
      if (other.HasBlocked) {
        Blocked = other.Blocked;
      }
      if (other.HasExpireTimer) {
        ExpireTimer = other.ExpireTimer;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Number = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (avatar_ == null) {
              Avatar = new global::libsignalservice.push.ContactDetails.Types.Avatar();
            }
            input.ReadMessage(Avatar);
            break;
          }
          case 34: {
            Color = input.ReadString();
            break;
          }
          case 42: {
            if (verified_ == null) {
              Verified = new global::libsignalservice.push.Verified();
            }
            input.ReadMessage(Verified);
            break;
          }
          case 50: {
            ProfileKey = input.ReadBytes();
            break;
          }
          case 56: {
            Blocked = input.ReadBool();
            break;
          }
          case 64: {
            ExpireTimer = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ContactDetails message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Avatar : pb::IMessage<Avatar> {
        private static readonly pb::MessageParser<Avatar> _parser = new pb::MessageParser<Avatar>(() => new Avatar());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Avatar> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.ContactDetails.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Avatar() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Avatar(Avatar other) : this() {
          _hasBits0 = other._hasBits0;
          contentType_ = other.contentType_;
          length_ = other.length_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Avatar Clone() {
          return new Avatar(this);
        }

        /// <summary>Field number for the "contentType" field.</summary>
        public const int ContentTypeFieldNumber = 1;
        private readonly static string ContentTypeDefaultValue = "";

        private string contentType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ContentType {
          get { return contentType_ ?? ContentTypeDefaultValue; }
          set {
            contentType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "contentType" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasContentType {
          get { return contentType_ != null; }
        }
        /// <summary>Clears the value of the "contentType" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearContentType() {
          contentType_ = null;
        }

        /// <summary>Field number for the "length" field.</summary>
        public const int LengthFieldNumber = 2;
        private readonly static uint LengthDefaultValue = 0;

        private uint length_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Length {
          get { if ((_hasBits0 & 1) != 0) { return length_; } else { return LengthDefaultValue; } }
          set {
            _hasBits0 |= 1;
            length_ = value;
          }
        }
        /// <summary>Gets whether the "length" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLength {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "length" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLength() {
          _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Avatar);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Avatar other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ContentType != other.ContentType) return false;
          if (Length != other.Length) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasContentType) hash ^= ContentType.GetHashCode();
          if (HasLength) hash ^= Length.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasContentType) {
            output.WriteRawTag(10);
            output.WriteString(ContentType);
          }
          if (HasLength) {
            output.WriteRawTag(16);
            output.WriteUInt32(Length);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasContentType) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ContentType);
          }
          if (HasLength) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Length);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Avatar other) {
          if (other == null) {
            return;
          }
          if (other.HasContentType) {
            ContentType = other.ContentType;
          }
          if (other.HasLength) {
            Length = other.Length;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                ContentType = input.ReadString();
                break;
              }
              case 16: {
                Length = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class GroupDetails : pb::IMessage<GroupDetails> {
    private static readonly pb::MessageParser<GroupDetails> _parser = new pb::MessageParser<GroupDetails>(() => new GroupDetails());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::libsignalservice.push.SignalServiceReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupDetails(GroupDetails other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      name_ = other.name_;
      members_ = other.members_.Clone();
      avatar_ = other.avatar_ != null ? other.avatar_.Clone() : null;
      active_ = other.active_;
      expireTimer_ = other.expireTimer_;
      color_ = other.color_;
      blocked_ = other.blocked_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupDetails Clone() {
      return new GroupDetails(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static pb::ByteString IdDefaultValue = pb::ByteString.Empty;

    private pb::ByteString id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_members_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> members_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Members {
      get { return members_; }
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 4;
    private global::libsignalservice.push.GroupDetails.Types.Avatar avatar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.GroupDetails.Types.Avatar Avatar {
      get { return avatar_; }
      set {
        avatar_ = value;
      }
    }

    /// <summary>Field number for the "active" field.</summary>
    public const int ActiveFieldNumber = 5;
    private readonly static bool ActiveDefaultValue = true;

    private bool active_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Active {
      get { if ((_hasBits0 & 1) != 0) { return active_; } else { return ActiveDefaultValue; } }
      set {
        _hasBits0 |= 1;
        active_ = value;
      }
    }
    /// <summary>Gets whether the "active" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasActive {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "active" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearActive() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "expireTimer" field.</summary>
    public const int ExpireTimerFieldNumber = 6;
    private readonly static uint ExpireTimerDefaultValue = 0;

    private uint expireTimer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExpireTimer {
      get { if ((_hasBits0 & 2) != 0) { return expireTimer_; } else { return ExpireTimerDefaultValue; } }
      set {
        _hasBits0 |= 2;
        expireTimer_ = value;
      }
    }
    /// <summary>Gets whether the "expireTimer" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExpireTimer {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "expireTimer" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExpireTimer() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 7;
    private readonly static string ColorDefaultValue = "";

    private string color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Color {
      get { return color_ ?? ColorDefaultValue; }
      set {
        color_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "color" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasColor {
      get { return color_ != null; }
    }
    /// <summary>Clears the value of the "color" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearColor() {
      color_ = null;
    }

    /// <summary>Field number for the "blocked" field.</summary>
    public const int BlockedFieldNumber = 8;
    private readonly static bool BlockedDefaultValue = false;

    private bool blocked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Blocked {
      get { if ((_hasBits0 & 4) != 0) { return blocked_; } else { return BlockedDefaultValue; } }
      set {
        _hasBits0 |= 4;
        blocked_ = value;
      }
    }
    /// <summary>Gets whether the "blocked" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBlocked {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "blocked" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBlocked() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if(!members_.Equals(other.members_)) return false;
      if (!object.Equals(Avatar, other.Avatar)) return false;
      if (Active != other.Active) return false;
      if (ExpireTimer != other.ExpireTimer) return false;
      if (Color != other.Color) return false;
      if (Blocked != other.Blocked) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      hash ^= members_.GetHashCode();
      if (avatar_ != null) hash ^= Avatar.GetHashCode();
      if (HasActive) hash ^= Active.GetHashCode();
      if (HasExpireTimer) hash ^= ExpireTimer.GetHashCode();
      if (HasColor) hash ^= Color.GetHashCode();
      if (HasBlocked) hash ^= Blocked.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteBytes(Id);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      members_.WriteTo(output, _repeated_members_codec);
      if (avatar_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Avatar);
      }
      if (HasActive) {
        output.WriteRawTag(40);
        output.WriteBool(Active);
      }
      if (HasExpireTimer) {
        output.WriteRawTag(48);
        output.WriteUInt32(ExpireTimer);
      }
      if (HasColor) {
        output.WriteRawTag(58);
        output.WriteString(Color);
      }
      if (HasBlocked) {
        output.WriteRawTag(64);
        output.WriteBool(Blocked);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Id);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += members_.CalculateSize(_repeated_members_codec);
      if (avatar_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Avatar);
      }
      if (HasActive) {
        size += 1 + 1;
      }
      if (HasExpireTimer) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExpireTimer);
      }
      if (HasColor) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Color);
      }
      if (HasBlocked) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupDetails other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      members_.Add(other.members_);
      if (other.avatar_ != null) {
        if (avatar_ == null) {
          Avatar = new global::libsignalservice.push.GroupDetails.Types.Avatar();
        }
        Avatar.MergeFrom(other.Avatar);
      }
      if (other.HasActive) {
        Active = other.Active;
      }
      if (other.HasExpireTimer) {
        ExpireTimer = other.ExpireTimer;
      }
      if (other.HasColor) {
        Color = other.Color;
      }
      if (other.HasBlocked) {
        Blocked = other.Blocked;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadBytes();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
          case 34: {
            if (avatar_ == null) {
              Avatar = new global::libsignalservice.push.GroupDetails.Types.Avatar();
            }
            input.ReadMessage(Avatar);
            break;
          }
          case 40: {
            Active = input.ReadBool();
            break;
          }
          case 48: {
            ExpireTimer = input.ReadUInt32();
            break;
          }
          case 58: {
            Color = input.ReadString();
            break;
          }
          case 64: {
            Blocked = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GroupDetails message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Avatar : pb::IMessage<Avatar> {
        private static readonly pb::MessageParser<Avatar> _parser = new pb::MessageParser<Avatar>(() => new Avatar());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Avatar> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.GroupDetails.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Avatar() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Avatar(Avatar other) : this() {
          _hasBits0 = other._hasBits0;
          contentType_ = other.contentType_;
          length_ = other.length_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Avatar Clone() {
          return new Avatar(this);
        }

        /// <summary>Field number for the "contentType" field.</summary>
        public const int ContentTypeFieldNumber = 1;
        private readonly static string ContentTypeDefaultValue = "";

        private string contentType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ContentType {
          get { return contentType_ ?? ContentTypeDefaultValue; }
          set {
            contentType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "contentType" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasContentType {
          get { return contentType_ != null; }
        }
        /// <summary>Clears the value of the "contentType" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearContentType() {
          contentType_ = null;
        }

        /// <summary>Field number for the "length" field.</summary>
        public const int LengthFieldNumber = 2;
        private readonly static uint LengthDefaultValue = 0;

        private uint length_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Length {
          get { if ((_hasBits0 & 1) != 0) { return length_; } else { return LengthDefaultValue; } }
          set {
            _hasBits0 |= 1;
            length_ = value;
          }
        }
        /// <summary>Gets whether the "length" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLength {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "length" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLength() {
          _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Avatar);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Avatar other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ContentType != other.ContentType) return false;
          if (Length != other.Length) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasContentType) hash ^= ContentType.GetHashCode();
          if (HasLength) hash ^= Length.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasContentType) {
            output.WriteRawTag(10);
            output.WriteString(ContentType);
          }
          if (HasLength) {
            output.WriteRawTag(16);
            output.WriteUInt32(Length);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasContentType) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ContentType);
          }
          if (HasLength) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Length);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Avatar other) {
          if (other == null) {
            return;
          }
          if (other.HasContentType) {
            ContentType = other.ContentType;
          }
          if (other.HasLength) {
            Length = other.Length;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                ContentType = input.ReadString();
                break;
              }
              case 16: {
                Length = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
